{"version":3,"sources":["Pages/Users/Users.module.css","Pages/Users/User/UserCard.module.css","Pages/Users/Paginator/Paginator.module.css","Pages/Users/User/UserCard.tsx","Pages/Users/Paginator/Paginator.tsx","api/usersApi.ts","redux/actions/UsersActionCreators.ts","Pages/Users/UsersSearchForm/UsersSearchForm.tsx","Pages/Users/Users.tsx"],"names":["module","exports","UserCard","id","imgUrl","isFollow","btnDisabledIdArray","unFollow","name","status","follow","className","classes","UserCard__left","to","UserCard__avatar","src","defaultAvatar","alt","disabled","some","i","toString","onClick","UserCard__button","UserCard__right","Paginator","currentPage","changePage","pages","useState","pageNumber","setPageNumber","leftBorder","rightBorder","prevState","filter","map","k","selectedPage","Paginator__item","Math","ceil","length","usersApi","pageSize","term","friend","instance","get","userId","post","then","res","data","delete","followToggle","type","FOLLOW_TOGGLE","changeCurrentPage","CHANGE_CURRENT_PAGE","isFetchToggle","bool","IS_FETCH_TOGGLE","followFetchingToggle","FOLLOW_FETCHING_TOGGLE","setFilter","SET_FILTERS","requestUsers","dispatch","a","users","count","items","SET_USERS","totalCount","SET_USERS_TOTAL_COUNT","UsersSearchForm","props","useSelector","state","usersPage","enableReinitialize","initialValues","String","validate","values","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","connect","withAuthRedirect","totalUsersCount","followFetchingId","isFetch","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","push","pathname","unFollowHandler","resultCode","ResultCodeEnum","SUCCESS","followHandler","pagesCount","Users","e","target","Users__container","Loader","u","followed","photos","small"],"mappings":"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","file":"static/js/5.0616d1f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__1sqOy\",\"Users__button\":\"Users_Users__button__1k46x\",\"Users__container\":\"Users_Users__container__3kzvl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCard\":\"UserCard_UserCard__3y7kK\",\"UserCard__button\":\"UserCard_UserCard__button__2kDBd\",\"UserCard__avatar\":\"UserCard_UserCard__avatar__3zR3R\",\"UserCard__left\":\"UserCard_UserCard__left__34gdq\",\"UserCard__right\":\"UserCard_UserCard__right__3DtvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paginator\":\"Paginator_Paginator__31iv1\",\"Paginator__item\":\"Paginator_Paginator__item__234dI\",\"selectedPage\":\"Paginator_selectedPage__3TjlG\"};","import React from 'react'\r\nimport classes from './UserCard.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultAvatar from '../../../img/avatar-profile.png'\r\n\r\ntype PropsTypes = {\r\n    id: number\r\n    imgUrl: string | null\r\n    isFollow: boolean | undefined\r\n    btnDisabledIdArray: Array<number>\r\n    unFollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    name: string\r\n    status: string\r\n}\r\n\r\nconst UserCard: React.FC<PropsTypes> =\r\n    ({\r\n         id,\r\n         imgUrl,\r\n         isFollow,\r\n         btnDisabledIdArray,\r\n         unFollow,\r\n         name,\r\n         status,\r\n         follow\r\n     }) => {\r\n        return (\r\n            <div className={classes.UserCard}>\r\n                <div className={classes.UserCard__left}>\r\n                    <NavLink to={'/profile/' + id}>\r\n                        <img className={classes.UserCard__avatar}\r\n                             src={imgUrl !== null ? imgUrl : defaultAvatar}\r\n                             alt=\"avatar\"\r\n                        />\r\n                    </NavLink>\r\n                    {\r\n                        isFollow\r\n                            ? <button\r\n                                disabled={btnDisabledIdArray.some(i => i === id) ? true : false}\r\n                                id={id.toString()}\r\n                                onClick={() => unFollow(id)}\r\n                                className={classes.UserCard__button}\r\n                            >\r\n                                {\"UNFOLLOW\"}\r\n                            </button>\r\n                            : <button\r\n                                disabled={btnDisabledIdArray.some(i => i === id) ? true : false}\r\n                                id={id.toString()}\r\n                                onClick={() => {\r\n                                    follow(id)\r\n                                }}\r\n                                className={classes.UserCard__button}\r\n                            >\r\n                                {\"FOLLOW\"}\r\n                            </button>\r\n                    }\r\n                </div>\r\n\r\n                <div className={classes.UserCard__right}>\r\n                    <span>{name}</span>\r\n                    <span>{status}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default UserCard\r\n","import React from 'react'\r\nimport classes from './Paginator.module.css'\r\nimport {useState} from 'react'\r\n\r\ntype PropsTypes = {\r\n    currentPage: number\r\n    changePage: (e: any) => void\r\n    pages: Array<number>\r\n}\r\n\r\nconst Paginator: React.FC<PropsTypes> = ({currentPage, changePage, pages}) => {\r\n    const pagesQuantity = 10\r\n    const [pageNumber, setPageNumber] = useState(1)\r\n    const leftBorder = (pageNumber - 1 ) * pagesQuantity\r\n    const rightBorder = pageNumber * pagesQuantity\r\n\r\n    const nextPage = () => {\r\n        if (Math.ceil(pages.length / pagesQuantity) > pageNumber) {\r\n            setPageNumber(prevState => prevState + 1)\r\n        }\r\n    }\r\n\r\n    const prefPage = () => {\r\n        if (1 < pageNumber) {\r\n            setPageNumber(prevState => prevState - 1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Paginator}>\r\n            <button onClick={prefPage}>-</button>\r\n            {pages\r\n                .filter( (i)=> i >=leftBorder && i <= rightBorder)\r\n                .map( (i, k)=> {\r\n                    return <span\r\n                        key={k}\r\n                        id={i.toString()}\r\n                        onClick={changePage}\r\n                        className={currentPage === i ? classes.selectedPage : classes.Paginator__item}\r\n                    >{i}</span>\r\n            })}\r\n            <button onClick={nextPage}>+</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import {instance, ResponseType} from \"./api\";\r\n\r\nexport const usersApi = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 100, term: string = '', friend: null | boolean = null) => {\r\n        return instance.get(\r\n            `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n            (friend === null ? '' : `&friend=${friend}`)\r\n        )\r\n    },\r\n    follow: (userId: number) => {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unFollow: (userId: number) => {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(res => res.data) as Promise<ResponseType>\r\n    },\r\n};\r\n","import {\r\n    CHANGE_CURRENT_PAGE,\r\n    FOLLOW_FETCHING_TOGGLE,\r\n    FOLLOW_TOGGLE,\r\n    IS_FETCH_TOGGLE,\r\n    SET_FILTERS,\r\n    SET_USERS,\r\n    SET_USERS_TOTAL_COUNT\r\n} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {usersApi} from \"../../api/usersApi\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FilterType} from \"../reducers/UsersReducer\";\r\n\r\nexport type UsersActionTypes = FollowFetchingToggleType | SetUsersType | ChangeCurrentPageType |\r\n    SetTotalUsersCountType | IsFetchToggleType | FollowToggleType | SetFilterType\r\n\r\n// ACTION CREATORS\r\ntype FollowToggleType = {\r\n    type: typeof FOLLOW_TOGGLE\r\n    id: number\r\n}\r\n\r\nexport const followToggle = (id: number): FollowToggleType => {\r\n    return {\r\n        type: FOLLOW_TOGGLE, id,\r\n    }\r\n}\r\n\r\ntype SetUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersType => {\r\n    return {\r\n        type: SET_USERS, users,\r\n    }\r\n}\r\n\r\ntype ChangeCurrentPageType = {\r\n    type: typeof CHANGE_CURRENT_PAGE\r\n    id: number\r\n}\r\nexport const changeCurrentPage = (id: number): ChangeCurrentPageType => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE, id,\r\n    }\r\n}\r\n\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SET_USERS_TOTAL_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (count: number): SetTotalUsersCountType => {\r\n    return {\r\n        type: SET_USERS_TOTAL_COUNT, count,\r\n    }\r\n}\r\n\r\ntype IsFetchToggleType = {\r\n    type: typeof IS_FETCH_TOGGLE\r\n    bool: boolean\r\n}\r\nexport const isFetchToggle = (bool: boolean): IsFetchToggleType => {\r\n    return {\r\n        type: IS_FETCH_TOGGLE, bool,\r\n    }\r\n}\r\n\r\ntype FollowFetchingToggleType = {\r\n    type: typeof FOLLOW_FETCHING_TOGGLE\r\n    id: number\r\n}\r\nexport const followFetchingToggle = (id: number): FollowFetchingToggleType => {\r\n    return {\r\n        type: FOLLOW_FETCHING_TOGGLE, id\r\n    }\r\n}\r\n\r\ntype SetFilterType = {\r\n    type: typeof SET_FILTERS\r\n    filter: FilterType\r\n}\r\n\r\nexport const setFilter = (filter: FilterType): SetFilterType => {\r\n    return {\r\n        type: SET_FILTERS, filter\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch<UsersActionTypes>) => {\r\n        dispatch(isFetchToggle(true))\r\n        dispatch(changeCurrentPage(currentPage))\r\n        dispatch(setFilter(filter))\r\n\r\n        await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend).then(res => {\r\n            dispatch(setUsers(res.data.items))\r\n            dispatch(setTotalUsersCount(res.data.totalCount))\r\n            dispatch(isFetchToggle(false))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (id: number) => (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(followFetchingToggle(id))\r\n\r\n    usersApi.follow(id).then(res => {\r\n        if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n            dispatch(followToggle(id))\r\n            dispatch(followFetchingToggle(id))\r\n        }\r\n    })\r\n}\r\n\r\nexport const unFollow = (id: number) => (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(followFetchingToggle(id))\r\n\r\n    usersApi.unFollow(id).then(res => {\r\n        if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n            dispatch(followToggle(id))\r\n            dispatch(followFetchingToggle(id))\r\n        }\r\n    })\r\n}\r\n","import React from 'react'\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../../redux/reducers/UsersReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype PropsTypes = {\r\n    onFilterChanged: (filter: FilterType) => void,\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsTypes> = (props) => {\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n\r\n    const onSubmit = (values: FormType, {setSubmitting}: {setSubmitting :(isSubmitting: boolean) => void}) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={ (values) => {\r\n                const errors = {}\r\n                return errors;\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default UsersSearchForm\r\n","import React, {useEffect} from 'react';\r\nimport classes from './Users.module.css'\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport UserCard from \"./User/UserCard\";\r\nimport Paginator from \"./Paginator/Paginator\"\r\nimport {\r\n    changeCurrentPage,\r\n    follow,\r\n    followFetchingToggle,\r\n    requestUsers,\r\n    unFollow,\r\n} from \"../../redux/actions/UsersActionCreators\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport UsersSearchForm from \"./UsersSearchForm/UsersSearchForm\";\r\nimport {FilterType} from \"../../redux/reducers/UsersReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype MapDispatchPropsTypes = {\r\n    changeCurrentPage: (id: number) => void\r\n    followFetchingToggle: () => void\r\n}\r\n\r\ntype PropsTypes = MapDispatchPropsTypes\r\n\r\nconst Users: React.FC<PropsTypes> = (props) => {\r\n    const totalUsersCount = useSelector((state: AppStateType) => state.usersPage.totalUsersCount)\r\n    const currentPage = useSelector((state: AppStateType) => state.usersPage.currentPage)\r\n    const pageSize = useSelector((state: AppStateType) => state.usersPage.pageSize)\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n    const followFetchingId = useSelector((state: AppStateType) => state.usersPage.followFetchingId)\r\n    const isFetch = useSelector((state: AppStateType) => state.usersPage.isFetch)\r\n    const users = useSelector((state: AppStateType) => state.usersPage.users)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1))\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        const query: any = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null ) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage, history])\r\n\r\n    const onChangePage = (e: { target: HTMLInputElement }): void => {\r\n        dispatch(requestUsers(+e.target.id, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChange = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const unFollowHandler = (userId: number) => {\r\n        dispatch(unFollow(userId))\r\n    }\r\n    const followHandler = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n    let pages = []\r\n    for (let i=1; i<=pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Users}>\r\n            <h1>users</h1>\r\n\r\n            <UsersSearchForm onFilterChanged={onFilterChange}/>\r\n\r\n            <Paginator\r\n                pages={pages}\r\n                changePage={onChangePage}\r\n                currentPage={currentPage}\r\n            />\r\n\r\n            <div className={classes.Users__container}>\r\n                {\r\n                    isFetch ? <Loader /> : null\r\n                }\r\n                {\r\n                    isFetch\r\n                        ? null\r\n                        : users.map( (u: any,i: number)=>{\r\n                            return (<UserCard\r\n                                key={i}\r\n                                id={u.id}\r\n                                name={u.name}\r\n                                status={u.status}\r\n                                isFollow={u.followed}\r\n                                imgUrl={u.photos.small}\r\n                                btnDisabledIdArray={followFetchingId}\r\n                                follow={followHandler}\r\n                                unFollow={unFollowHandler}\r\n                            />)\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null,\r\n    {\r\n        changeCurrentPage,\r\n        followFetchingToggle,\r\n    }\r\n)(withAuthRedirect(Users))\r\n\r\n\r\n"],"sourceRoot":""}