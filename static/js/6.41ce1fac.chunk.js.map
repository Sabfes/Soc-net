{"version":3,"sources":["api/ChatApi.ts","redux/actions/ChatActionCreators.ts","Pages/ChatPage/ChatPage.tsx"],"names":["subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChanel","newMessageHandler","e","newMessages","JSON","parse","data","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","status","close","WebSocket","addEventListener","ChatApi","eventName","callback","push","filter","message","send","_newMessageHandler","newMessageHandlerCreator","dispatch","messages","type","MESSAGES_RECEIVED","payload","setMessages","_statusChangingHandler","statusChangingHandlerCreator","STATUS_CHANGE","statusChange","Chat","useDispatch","useSelector","state","chat","useEffect","a","Messages","messagesAnchorRef","useRef","useState","autoScroll","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","mes","index","Message","ref","React","memo","width","src","photo","alt","userName","AddMessageForm","setMessage","sendMessageHandler","onKeyPress","code","onChange","value","disabled","onClick","ChatPage","props"],"mappings":"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","file":"static/js/6.41ce1fac.chunk.js","sourcesContent":["import {ChatMessageType} from \"../Pages/ChatPage/ChatPage\";\r\nimport {StatusType} from \"../redux/reducers/ChatReducer\";\r\n\r\ntype EventsNamesType = 'message-received' | 'status-changed'\r\ntype MessagesReceivedSubscribersType = (messages: ChatMessageType[]) => void\r\ntype StatusReceivedSubscribersType = (status: StatusType) => void\r\n\r\nlet subscribers = {\r\n    'message-received': [] as MessagesReceivedSubscribersType[],\r\n    'status-changed': [] as StatusReceivedSubscribersType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChanel, 3000)\r\n}\r\nconst newMessageHandler = (e: MessageEvent)=> {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['message-received'].forEach(s => s(newMessages))\r\n};\r\nconst openHandler = ()=> {\r\n    notifySubscribersAboutStatus('ready')\r\n};\r\nconst errorHandler = ()=> {\r\n    notifySubscribersAboutStatus('error')\r\n};\r\nfunction cleanUp() {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', newMessageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s=>s(status))\r\n}\r\n\r\nfunction createChanel() {\r\n    cleanUp()\r\n    ws?.close()\r\n\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus(\"pending\")\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', newMessageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const ChatApi = {\r\n    start() {\r\n        createChanel()\r\n    },\r\n    stop() {\r\n        subscribers['message-received'] = []\r\n        subscribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscribersType | StatusReceivedSubscribersType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unSubscribe(eventName: EventsNamesType,callback: MessagesReceivedSubscribersType | StatusReceivedSubscribersType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n","import {MESSAGES_RECEIVED, STATUS_CHANGE} from \"./ActionTypes\";\r\nimport {ChatMessageType} from \"../../Pages/ChatPage/ChatPage\";\r\nimport {ChatApi} from \"../../api/ChatApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AuthActionsTypes} from \"./AuthActionCreators\";\r\nimport {StatusType} from \"../reducers/ChatReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"../redux-store\";\r\n\r\n\r\nexport type ChatActionsTypes = SetMessagesType | StatusChangeType\r\n\r\ntype SetMessagesType = {\r\n    type: typeof MESSAGES_RECEIVED\r\n    payload: ChatMessageType[]\r\n}\r\n\r\nexport const setMessages = (messages: ChatMessageType[]): SetMessagesType => {\r\n    return {\r\n        type: MESSAGES_RECEIVED,\r\n        payload: messages,\r\n    }\r\n}\r\n\r\ntype StatusChangeType = {\r\n    type: typeof STATUS_CHANGE\r\n    status: string\r\n}\r\n\r\nexport const statusChange = (status: StatusType): StatusChangeType => {\r\n    return {\r\n        type: STATUS_CHANGE,\r\n        status: status,\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ChatActionsTypes>\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages => {\r\n            dispatch(setMessages(messages))\r\n        })\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangingHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangingHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangingHandler === null) {\r\n        _statusChangingHandler = (status )=> {\r\n            dispatch(statusChange(status))\r\n        }\r\n    }\r\n    return _statusChangingHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    ChatApi.start()\r\n    ChatApi.subscribe('message-received', newMessageHandlerCreator(dispatch))\r\n    ChatApi.subscribe('status-changed', statusChangingHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    ChatApi.unSubscribe('message-received', newMessageHandlerCreator(dispatch))\r\n    ChatApi.unSubscribe('status-changed', statusChangingHandlerCreator(dispatch))\r\n    ChatApi.stop()\r\n}\r\n\r\nexport const sendMessage = (messages: string): ThunkType => async (dispatch) => {\r\n   ChatApi.sendMessage(messages)\r\n}\r\n","import React, {useEffect, useRef, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/actions/ChatActionCreators\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n// import classes from './ChatPage.module.css'\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\ntype PropsTypes = {\r\n\r\n}\r\n\r\nconst ChatPage: React.FC<PropsTypes> = (props) => {\r\n    return (\r\n        <div>\r\n            <h1>chat</h1>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state:AppStateType) => state.chat.status)\r\n\r\n    useEffect( ()=> {\r\n        dispatch(startMessagesListening())\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Error. Please refresh the page</div>}\r\n\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n    const messages = useSelector((state:AppStateType) => state.chat.messages )\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [autoScroll, setAutoScroll] = useState(false)\r\n\r\n\r\n    useEffect( ()=> {\r\n        if (autoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n\r\n        if (Math.abs((element.scrollHeight - element.scrollTop)) - element.clientHeight <  300) {\r\n            !autoScroll && setAutoScroll(true)\r\n        } else {\r\n            !autoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '400px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map( (mes, index) => {\r\n                 return <Message\r\n                     key={index}\r\n                     message={mes}\r\n                 />\r\n            })}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\nconst Message: React.FC<{message:ChatMessageType}> = React.memo(({message}) => {\r\n    return (\r\n        <div>\r\n            <img width={35} height={35} src={message.photo} alt=\"avatar\"/>\r\n            <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [message, setMessage] = useState('')\r\n\r\n    const status = useSelector((state:AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    const keyPressHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>): void => {\r\n        if (e.code === \"Enter\") {\r\n            sendMessageHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onKeyPress={keyPressHandler} onChange={e => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n"],"sourceRoot":""}