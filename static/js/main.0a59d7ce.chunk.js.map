{"version":3,"sources":["Pages/Profile/myPosts/MyPosts.module.css","redux/actions/ActionTypes.ts","Pages/Profile/ProfileInfo/ProfileInfo.module.css","Pages/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","Pages/Profile/ProfileInfo/ProfileDataFormRedux/ProfileDataFormRedux.module.css","Pages/Profile/ProfileInfo/Contacts/Contact.module.css","Pages/Login/Login.module.css","components/Loader/Loader.module.css","components/Header/Header.module.css","img/avatar-profile.png","components/Loader/Loader.tsx","Pages/Profile/Profile.module.css","components/Button/Button.module.css","Pages/News/News.module.css","Pages/Music/Music.module.css","Pages/Settings/Settings.module.css","api/api.ts","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","Pages/Profile/myPosts/Post/Post.tsx","Pages/Profile/myPosts/PostReduxForm/PostReduxForm.tsx","Pages/Profile/myPosts/MyPosts.tsx","Pages/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Button/Button.js","Pages/Profile/ProfileInfo/ProfileDataFormRedux/ProfileDataFormRedux.tsx","Pages/Profile/ProfileInfo/Contacts/Contact.tsx","Pages/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Pages/Profile/ProfileInfo/ProfileInfo.tsx","api/profileApi.ts","redux/actions/ProfileActionCreators.ts","Pages/Profile/Profile.tsx","Pages/News/News.tsx","audio/audio-boyka.mp3","Pages/Music/Music.tsx","Pages/Settings/Settings.tsx","Pages/Login/LoginReduxForm.tsx","api/authApi.ts","redux/actions/AuthActionCreators.ts","Pages/Login/Login.tsx","components/Header/Header.tsx","hoc/withSuspense.tsx","App.tsx","redux/actions/AppActionCreator.ts","reportWebVitals.js","redux/reducers/ProfileReducer.ts","redux/reducers/MessagesReducer.ts","redux/reducers/UsersReducer.ts","redux/reducers/AuthReducer.ts","redux/reducers/AppReducer.ts","redux/reducers/ChatReducer.ts","redux/redux-store.ts","index.tsx","utils/validate/validate.ts","components/FormControls/FormControls.tsx","components/FormControls/FormControls.module.css","Pages/Profile/ProfileInfo/ProfileData/ProfileData.module.css","hoc/withAuthRedirect.js","Pages/Profile/myPosts/Post/Post.module.css"],"names":["module","exports","NEW_POST_TEXT","ADD_POST","SET_PROFILE_INFO","SET_PROFILE_STATUS","SAVE_PHOTO_SUCCESS","ADD_MESSAGE","FOLLOW_TOGGLE","SET_USERS","CHANGE_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","IS_FETCH_TOGGLE","FOLLOW_FETCHING_TOGGLE","SET_FILTERS","SET_USER_DATA","INITIALIZED_SUCCESS","MESSAGES_RECEIVED","STATUS_CHANGE","Loader","className","classes","Container","ldsEllipsis","ResultCodeEnum","instance","axios","create","withCredentials","baseURL","headers","connect","state","userId","auth","defaultSelectedKeys","mode","Item","icon","UserOutlined","Navbar__link","to","activeClassName","Navbar__linkActive","MessageOutlined","TeamOutlined","DesktopOutlined","SoundOutlined","SettingOutlined","Post","props","Post__img","src","alt","Post__text","text","maxLength","maxLengthCreator","NewPostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","MyPost__textarea","validate","requiredField","component","TextArea","name","MyPosts","MyPost","onChange","posts","map","post","i","ProfileStatus","desc","updateProfileStatus","isOwner","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","autoFocus","e","target","value","type","ProfileStatus_status","onDoubleClick","Button","ProfileDataFormRedux","error","profileInfo","style","color","marginTop","fontSize","MainInfo","Input","MainInfo__job","Object","keys","contacts","item","index","Contact","title","Contact__link","ProfileData","ProfileData__info","ProfileData__inputInfo","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileData__contacts","ProfileInfo","ProfileInfo__avatarImg","avatarImg","large","defaultAvatar","files","length","savePhoto","onClick","initialValues","formData","updateProfileInfo","then","profileApi","get","res","data","put","photo","FormData","append","setProfileStatus","getProfile","dispatch","a","Profile","updateProfile","isAuth","match","params","id","history","push","Error","getProfileStatus","onChangeHandler","addPost","newPostText","this","prevProps","prevState","photos","React","Component","compose","withRouter","profilePage","newPostTextUpdate","getState","resultCode","SUCCESS","console","log","stopSubmit","_error","messages","Promise","reject","file","withAuthRedirect","News","Music","controls","audioTest","Settings","LoginReduxForm","authApi","email","password","rememberMe","delete","setAuthUserData","login","authMe","LoginUser","msg","Login","Login__content","AppHeader","useSelector","useDispatch","padding","backgroundColor","span","Header__logo","Header__login","withSuspense","WraperConponent","Suspense","fallback","Content","Layout","Sider","DialogsLazy","lazy","UsersLazy","ChatPageLazy","SuspenseDialogs","SuspenseUsers","SuspenseChatPage","App","collapsed","onCollapse","setState","initializeApp","initialized","minHeight","theme","collapsible","margin","path","exact","render","textAlign","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","small","ProfileReducer","action","arr","dialogs","newMessageText","MessagesReducer","message","msgs","users","pageSize","totalUsersCount","currentPage","isFetch","followFetchingId","filter","term","friend","UsersReducer","followed","count","bool","prevArray","indexOf","isFetching","AuthReducer","AppReducer","ChatReducer","payload","rootReducer","combineReducers","messagesPage","usersPage","formReducer","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","input","meta","hasError","touched","formControl","formControl__textArea","errorMessage","formControl__input","RedirectComponent"],"mappings":"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","file":"static/js/main.0a59d7ce.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPost__textarea\":\"MyPosts_MyPost__textarea__3GPnL\"};","// ACTION TYPE\r\n\r\n// PROFILE\r\nexport const NEW_POST_TEXT = 'profile/NEW_POST_TEXT'\r\nexport const ADD_POST = 'profile/ADD_POST'\r\nexport const SET_PROFILE_INFO = 'profile/SET_PROFILE_INFO'\r\nexport const SET_PROFILE_STATUS = 'profile/SET_PROFILE_STATUS'\r\nexport const SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\n\r\n// MESSAGES\r\nexport const ADD_MESSAGE = 'message/ADD_MESSAGE'\r\nexport const NEW_MESSAGE_TEXT = 'message/NEW_MESSAGE_TEXT'\r\n\r\n// USERS\r\nexport const FOLLOW_TOGGLE = 'users/FOLLOW_TOGGLE'\r\nexport const SET_USERS = 'users/SET_USERS'\r\nexport const CHANGE_CURRENT_PAGE = 'users/CHANGE_CURRENT_PAGE'\r\nexport const SET_USERS_TOTAL_COUNT = 'users/SET_USERS_TOTAL_COUNT'\r\nexport const IS_FETCH_TOGGLE = 'users/IS_FETCH_TOGGLE'\r\nexport const FOLLOW_FETCHING_TOGGLE = 'users/FOLLOW_FETCHING_TOGGLE'\r\nexport const SET_FILTERS = 'users/SET_FILTERS'\r\n\r\n//Auth\r\nexport const SET_USER_DATA = 'auth/SET_USER_DATA'\r\nexport const IS_AUTH_TOGGLE = 'auth/IS_AUTH_TOGGLE'\r\n\r\n//APP\r\nexport const INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS'\r\n\r\n//CHAT\r\nexport const MESSAGES_RECEIVED = 'chat/MESSAGES_RECEIVED'\r\nexport const STATUS_CHANGE = 'chat/STATUS_CHANGE'\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__Qz6kx\",\"ProfileInfo__description\":\"ProfileInfo_ProfileInfo__description__3Oajh\",\"ProfileInfo__avatarImg\":\"ProfileInfo_ProfileInfo__avatarImg__35jl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileStatus\":\"ProfileStatus_ProfileStatus__3y50i\",\"ProfileStatus_status\":\"ProfileStatus_ProfileStatus_status__2ESIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainInfo\":\"ProfileDataFormRedux_MainInfo__3RmED\",\"MainInfo__job\":\"ProfileDataFormRedux_MainInfo__job__2OPZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__2oWNB\",\"Contact__link\":\"Contact_Contact__link__223Mr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__ZfgQq\",\"Login__content\":\"Login_Login__content__3Ak9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Loader_Container__37vW8\",\"ldsEllipsis\":\"Loader_ldsEllipsis__z4-M-\",\"ldsEllipsis1\":\"Loader_ldsEllipsis1__jxmmq\",\"ldsEllipsis2\":\"Loader_ldsEllipsis2__q9sd3\",\"ldsEllipsis3\":\"Loader_ldsEllipsis3__f5vGN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header__logo\":\"Header_Header__logo__SM7g_\",\"Header__login\":\"Header_Header__login__Dv4VF\"};","export default __webpack_public_path__ + \"static/media/avatar-profile.2d4393d1.png\";","import React from 'react'\r\nimport classes from './Loader.module.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.ldsEllipsis}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"Profile_ProfileInfo__2cRkl\",\"ProfileInfo__background\":\"Profile_ProfileInfo__background__1HFpH\",\"PostContainer\":\"Profile_PostContainer__2UOfg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__pQN7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"News\":\"News_News__3anGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Music\":\"Music_Music__DPSnp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Settings\":\"Settings_Settings__n186p\"};","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"71a0323c-7ff9-4763-8740-70e9a845b5eb\",\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__26A8w\",\"Navbar__link\":\"Navbar_Navbar__link__1Ohz8\",\"Navbar__linkActive\":\"Navbar_Navbar__linkActive__314D7\"};","import React from 'react'\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Menu} from \"antd\";\r\nimport {DesktopOutlined, UserOutlined, MessageOutlined, TeamOutlined ,SettingOutlined,SoundOutlined , } from \"@ant-design/icons\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst Navbar: React.FC<MapStateToPropsType> = ({userId}) => {\r\n    return (\r\n        <Menu defaultSelectedKeys={['1']} mode=\"inline\">\r\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/profile/' + userId}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Profile\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<MessageOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/dialogs'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Messages\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<TeamOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/users'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Users\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"4\" icon={<DesktopOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/news'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    News\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\" icon={<SoundOutlined  />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/music'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Music\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"6\" icon={<SettingOutlined  />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/settings'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Settings\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"7\" icon={<SettingOutlined  />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/chat'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    chat\r\n                </NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Navbar)\r\n","import React from 'react'\r\nimport classes from './Post.module.css'\r\n\r\ntype PropsTypes = {\r\n    text: String\r\n}\r\n\r\nconst Post: React.FC<PropsTypes> = props => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.Post}>\r\n                <img className={classes.Post__img} src=\"http://cdn.onlinewebfonts.com/svg/img_167183.png\" alt=\"post_img\"/>\r\n                <span className={classes.Post__text} >{props.text}</span>\r\n            </div>\r\n            <span>like</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validate/validate\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport classes from \"../MyPosts.module.css\";\r\nimport {TextArea} from \"../../../../components/FormControls/FormControls\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\n\r\ntype newPostValueType = {\r\n    newPostText: string,\r\n    handleSubmit: () => void,\r\n}\r\n\r\nconst newPostForm: React.FC<InjectedFormProps<newPostValueType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                placeholder={'Post message'}\r\n                className={classes.MyPost__textarea}\r\n                validate={[requiredField, maxLength]}\r\n                component={TextArea}\r\n                name={'newPostText'}\r\n            />\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const NewPostReduxForm = reduxForm<newPostValueType>({\r\n    form: 'ProfileNewPostForm'\r\n})(newPostForm)\r\n","import React from 'react'\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {NewPostReduxForm} from \"./PostReduxForm/PostReduxForm\";\r\n\r\n\r\ntype PropsType = {\r\n    onChange: (data: any) => void\r\n    posts: Array<{text: string}>\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = props => {\r\n    return (\r\n        <div className={classes.MyPost}>\r\n            <h1>My posts</h1>\r\n\r\n            <NewPostReduxForm onSubmit={props.onChange}/>\r\n\r\n            {\r\n                props.posts.map( (post, i) => {\r\n                    return <Post key={i} text={post.text}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts\r\n","import React, {useEffect, useState} from 'react'\r\nimport classes from './ProfileStatus.module.css'\r\n\r\ntype PropsTypes = {\r\n    updateProfileStatus: (status: string) => void\r\n    desc: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus: React.FC<PropsTypes> = ({desc, updateProfileStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(desc || 'desc')\r\n\r\n    useEffect(()=>{\r\n        setStatus(desc)\r\n    }, [desc])\r\n\r\n    const onChangeProfileStatus = () => {\r\n        setEditMode(false)\r\n        updateProfileStatus(status)\r\n    }\r\n    return (\r\n        <div className={classes.ProfileStatus}>\r\n            Status:\r\n            {\r\n                editMode\r\n                    ?   <input\r\n                        onBlur={onChangeProfileStatus}\r\n                        autoFocus={true}\r\n                        onChange={(e) => {setStatus(e.target.value)}}\r\n                        value={status}\r\n                        type='text'\r\n                    />\r\n                    :   <span className={classes.ProfileStatus_status} onDoubleClick={ () => {\r\n                            if (isOwner) {\r\n                                setEditMode(true)\r\n                            }\r\n                        }}>\r\n                            {status}\r\n                        </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport classes from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button {...props} className={classes.Button}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\nimport classes from \"./ProfileDataFormRedux.module.css\";\r\nimport {Input, TextArea} from \"../../../../components/FormControls/FormControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../../utils/validate/validate\";\r\nimport Button from \"../../../../components/Button/Button\";\r\nimport {ProfileDataType, ContactsType} from '../../../../types/types'\r\n\r\ntype ProfileDataFormValue = {\r\n    aboutMe: String,\r\n    lookingForAJob: Boolean,\r\n    lookingForAJobDescription: String,\r\n    fullName: String,\r\n    contacts: ContactsType,\r\n    handleSubmit: () => void,\r\n    initialValues: any,\r\n}\r\ntype PropsTypes = {\r\n    profileInfo: ProfileDataType,\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormValue, PropsTypes> & PropsTypes> = ({\r\n    handleSubmit,\r\n    error,\r\n    profileInfo\r\n     }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Button\r\n                type=\"submit\"\r\n                value=\"save\"\r\n            />\r\n\r\n            {\r\n                error\r\n                    ? <div style={{color: 'red', marginTop: '20px', fontSize: '24px'}}>\r\n                        {error}\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <div className={classes.MainInfo}>\r\n                <div>\r\n                    <p>Full Name:</p>\r\n                    <Field component={Input} validate={[requiredField]} name={'fullName'} placeholder='FullName'/>\r\n                </div>\r\n\r\n                <div className={classes.MainInfo__job}>\r\n                    <p>Looking For a job?</p>\r\n                    <Field component={Input} validate={[]} name={'lookingForAJob'} placeholder='Looking For a job?' type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <p>Job Description:</p>\r\n                    <Field component={TextArea} validate={[requiredField]} name={'lookingForAJobDescription'} placeholder='job Description'/>\r\n                </div>\r\n                <div>\r\n                    <p>About Me:</p>\r\n                    <Field component={TextArea} validate={[requiredField]} name={'aboutMe'} placeholder='AboutMe'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                Contacts:\r\n                {\r\n                    Object.keys(profileInfo.contacts).map((item, index) => {\r\n                        return <div key={index}>\r\n                            <Field component={Input} validate={[]} name={'contacts.' + item} placeholder={item}/>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileDataFormValue,PropsTypes>({\r\n    form: 'profileData',\r\n})(ProfileDataForm)\r\n\r\n","import React from 'react'\r\nimport classes from './Contact.module.css'\r\n\r\ntype PropsTypes = {\r\n    value: String,\r\n    title: String\r\n}\r\n\r\nconst Contact: React.FC<PropsTypes> = ({title, value}) => {\r\n    return (\r\n        <div className={classes.Contact}>\r\n            {title}: <span className={classes.Contact__link}>{value || '-'}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from \"react\";\r\nimport classes from \"./ProfileData.module.css\";\r\nimport Contact from \"../Contacts/Contact\";\r\n\r\ntype PropsTypes = {\r\n    profileInfo: any\r\n}\r\n\r\nconst ProfileData: React.FC<PropsTypes> = ({profileInfo}) => {\r\n    return (\r\n        <div className={classes.ProfileData}>\r\n            {/*Описание профиля*/}\r\n            <div className={classes.ProfileData__info}>\r\n                <div>\r\n                    Fullname:\r\n                    <span className={classes.ProfileData__inputInfo}>\r\n                        {profileInfo.fullName}\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    looking For A Job:\r\n                    <span className={classes.ProfileData__inputInfo}>\r\n                        {profileInfo.lookingForAJob ? 'yes' : 'no'}\r\n                    </span>\r\n                </div>\r\n                {/*Показываем описание поиска работы, если поиск работы === true*/}\r\n                {\r\n                    profileInfo.lookingForAJob\r\n                        ? <div>\r\n                            looking For A Job Description:\r\n                            <span className={classes.ProfileData__inputInfo}>\r\n                                {profileInfo.lookingForAJobDescription}\r\n                            </span>\r\n                        </div>\r\n                        : null\r\n                }\r\n                <div>\r\n                    aboutMe: <span className={classes.ProfileData__inputInfo}>{profileInfo.aboutMe}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.ProfileData__contacts}>\r\n                Contacts:\r\n                {\r\n                    Object.keys(profileInfo.contacts).map(item => {\r\n                        return <Contact key={item} title={item} value={profileInfo.contacts[item]}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport defaultAvatar from '../../../img/avatar-profile.png'\r\nimport {ProfileDataFormRedux} from \"./ProfileDataFormRedux/ProfileDataFormRedux\"\r\nimport ProfileData from \"./ProfileData/ProfileData\"\r\nimport Button from \"../../../components/Button/Button\"\r\nimport {ProfileDataType} from \"../../../types/types\"\r\n\r\ntype PropsType = {\r\n    savePhoto: (photo: any) => void,\r\n    updateProfileInfo: (profileInfo: ProfileDataType) => Promise<any>,\r\n    updateProfileStatus: (status: string) => void,\r\n\r\n    profileInfo: any,\r\n    avatarImg: {\r\n        large: string,\r\n        small: string,\r\n    },\r\n    isOwner: boolean,\r\n    desc: string,\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onAvatarSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.updateProfileInfo(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ProfileInfo}>\r\n            {/*Аватар профиля*/}\r\n            <img\r\n                className={classes.ProfileInfo__avatarImg}\r\n                src={props.avatarImg.large || defaultAvatar}\r\n                alt=\"avatar-img\"\r\n            />\r\n            {/*Показываем кнопку загрузки фотографии, если страница - владельца.*/}\r\n            {\r\n                props.isOwner\r\n                    ? <input type={\"file\"} onChange={onAvatarSelected}/>\r\n                    : null\r\n            }\r\n            <ProfileStatus\r\n                isOwner={props.isOwner}\r\n                updateProfileStatus={props.updateProfileStatus}\r\n                desc={props.desc}\r\n            />\r\n\r\n            {/*Показываем кнопку настройки, если страница - владельца.*/}\r\n            {\r\n                props.isOwner && !editMode\r\n                    ? <Button onClick={() => {\r\n                        setEditMode(true)\r\n                    }}\r\n                              value={'edit'}\r\n                    />\r\n                    : null\r\n            }\r\n            {/*Показываем форму настройки если включен editMode*/}\r\n            {\r\n                editMode\r\n                    ? <ProfileDataFormRedux\r\n                        profileInfo={props.profileInfo}\r\n                        initialValues={props.profileInfo}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData\r\n                        profileInfo={props.profileInfo}\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo\r\n","import {instance, ResponseType} from \"./api\";\r\nimport {PhotosType, ProfileDataType} from \"../types/types\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: number) => {\r\n        return instance.get<ProfileDataType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getProfileStatus: (userId: number) => {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateProfileStatus: (status: string) => {\r\n        return instance.put<ResponseType>(`profile/status`,{status})\r\n            .then(res => res.data)\r\n    },\r\n    updateProfileInfo: (data: any) => {\r\n        return instance.put(`profile/`, data)\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto: (photo: any) => {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n\r\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    }\r\n};\r\n","import {ADD_POST, NEW_POST_TEXT, SAVE_PHOTO_SUCCESS, SET_PROFILE_INFO, SET_PROFILE_STATUS} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {profileApi} from \"../../api/profileApi\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileDataType} from \"../../types/types\";\r\n\r\nexport type ProfileActionsTypes = AddPostType | SavePhotoSuccessType | NewPostTextUpdateType |\r\n    SetProfileStatusType | NewPostTextUpdateType | SetProfileStatusType | SetProfileInfoType\r\n\r\n// ACTION CREATORS\r\ntype AddPostType = {\r\n    type: typeof ADD_POST\r\n    text: string\r\n}\r\n\r\nexport const addPost = (text: string): AddPostType => {\r\n    return {\r\n        type: ADD_POST, text\r\n    }\r\n}\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photo: any\r\n}\r\n\r\nexport const savePhotoSuccess = (photo: any): SavePhotoSuccessType => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS, photo,\r\n    }\r\n}\r\n\r\ntype NewPostTextUpdateType = {\r\n    type: typeof NEW_POST_TEXT\r\n    text: string\r\n}\r\n\r\nexport const newPostTextUpdate = (text:string): NewPostTextUpdateType => {\r\n    return {\r\n        type: NEW_POST_TEXT, text\r\n    }\r\n}\r\n\r\ntype SetProfileInfoType = {\r\n    type: typeof SET_PROFILE_INFO\r\n    data: ProfileDataType\r\n}\r\n\r\nexport const setProfileInfo = (data: ProfileDataType): SetProfileInfoType => {\r\n    return {\r\n        type: SET_PROFILE_INFO, data\r\n    }\r\n}\r\n\r\ntype SetProfileStatusType = {\r\n    type: typeof SET_PROFILE_STATUS\r\n    status: string\r\n}\r\n\r\nexport const setProfileStatus = (status: string): SetProfileStatusType => {\r\n    return {\r\n        type: SET_PROFILE_STATUS, status,\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const updateProfileInfo = (data: any) => async (dispatch: any, getState: ()=> AppStateType) => {\r\n    const userId = getState().auth.userId\r\n    const res = await profileApi.updateProfileInfo(data)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        if (userId !== null) {\r\n            dispatch(getProfile(userId))\r\n        } else {\r\n            console.log('userId = null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('profileData', {_error: res.messages[0]}))\r\n        return Promise.reject(res.messages[0])\r\n    }\r\n\r\n}\r\n\r\nexport const getProfile = (userId:number) => async (dispatch: any) => {\r\n    const res = await profileApi.getProfile(userId)\r\n\r\n    dispatch(setProfileInfo(res))\r\n}\r\n\r\nexport const getProfileStatus = (userId:number) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.getProfileStatus(userId)\r\n\r\n    dispatch(setProfileStatus(res))\r\n}\r\n\r\nexport const updateProfileStatus = (status:string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.updateProfileStatus(status)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.savePhoto(file)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(savePhotoSuccess(res.data.photos))\r\n    }\r\n}","import React, {ComponentType} from 'react'\r\nimport classes from './Profile.module.css'\r\nimport MyPosts from \"./myPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addPost,\r\n    getProfile,\r\n    getProfileStatus,\r\n    newPostTextUpdate,\r\n    updateProfileStatus,\r\n    savePhoto, updateProfileInfo\r\n} from \"../../redux/actions/ProfileActionCreators\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileDataType} from \"../../types/types\";\r\n\r\nexport type NewPostType = {\r\n    newPostText: string\r\n}\r\ntype MapStateToProps = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    newPostTextUpdate: (newPostText: string) => void,\r\n    addPost: (text: any) => void,\r\n    getProfile: (userId: number) => void,\r\n    updateProfileInfo: (info: ProfileDataType) => Promise<any>,\r\n    updateProfileStatus: (status: string) => void,\r\n    getProfileStatus: (userId: number) => void,\r\n    savePhoto: (photo: any) => void,\r\n}\r\ntype PathParamsType = {\r\n    id: string,\r\n}\r\n\r\n\r\ntype PropsType = MapStateToProps & MapDispatchToProps & RouteComponentProps<PathParamsType>;\r\n\r\nclass Profile extends React.Component<PropsType> {\r\n    updateProfile = () => {\r\n        if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        let userId: number | null = +this.props.match.params.id\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n            if (!userId) {\r\n                this.props.history.push('/login ')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            throw new Error('Id should exist in URL params or in state')\r\n        } else {\r\n            this.props.getProfile(userId as number)\r\n            this.props.getProfileStatus(userId as number)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.updateProfile()\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (data: any) => {\r\n        this.props.addPost(data.newPostText)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <main className={classes.ProfileInfo}>\r\n                <ProfileInfo\r\n                    updateProfileInfo={this.props.updateProfileInfo}\r\n                    profileInfo={this.props.profileInfo}\r\n                    isOwner={+this.props.match.params.id === this.props.userId}\r\n                    updateProfileStatus={this.props.updateProfileStatus}\r\n                    avatarImg={this.props.photos}\r\n                    desc={this.props.status}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n                <MyPosts\r\n                    onChange={this.onChangeHandler}\r\n                    posts={this.props.posts}\r\n                />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profileInfo: state.profilePage.profileInfo,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId,\r\n        photos: state.profilePage.photos,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        newPostTextUpdate,\r\n        addPost,\r\n        getProfile,\r\n        updateProfileInfo,\r\n        updateProfileStatus,\r\n        getProfileStatus,\r\n        savePhoto,\r\n    })\r\n)(Profile)\r\n","import React from 'react'\r\nimport classes from './News.module.css'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst News: React.FC = () => {\r\n    return (\r\n        <div className={classes.News}>\r\n            <h1>News</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(News)\r\n","export default __webpack_public_path__ + \"static/media/audio-boyka.dea5dbfe.mp3\";","import React from 'react'\r\nimport classes from './Music.module.css'\r\n// @ts-ignore\r\nimport audioTest from '../../audio/audio-boyka.mp3'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst Music: React.FC = () => {\r\n    const audioPlayHandler = (e: any): void => {\r\n        console.log(e.target)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Music}>\r\n            <h1>Music</h1>\r\n\r\n            <div onClick={audioPlayHandler}>\r\n                <p>Miya Boyko - AUF</p>\r\n                <audio controls>\r\n                    <source src={audioTest} type=\"audio/mpeg\"/>\r\n                </audio>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Music)\r\n","import React from 'react'\r\nimport classes from './Settings.module.css'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst Settings: React.FC = () => {\r\n    return (\r\n        <div className={classes.Settings}>\r\n            <h1>Settings</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Settings)\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../components/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validate/validate\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    handleSubmit: () => void\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({error, handleSubmit }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field component={Input} validate={[maxLength, requiredField]} name={'email'} placeholder='login'/>\r\n            <Field component={Input} validate={[maxLength, requiredField]} name={'password'} placeholder='password'/>\r\n            <div>\r\n                <Field component={'input'} name={'rememberMe'} type=\"checkbox\"/>\r\n                <span>remember me</span>\r\n            </div>\r\n            <button>login</button>\r\n            {\r\n                error\r\n                    ?   <div style={{color: 'red', marginTop: '20px', fontSize: '24px'}}>\r\n                            {error}\r\n                        </div>\r\n                    : null\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType>({form: 'login'})(LoginForm)\r\n","import {instance, ResponseType} from \"./api\";\r\n\r\ntype GetAuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authApi = {\r\n    getAuth: ()=> {\r\n        return instance.get<ResponseType<GetAuthResponseDataType>>('auth/me')\r\n            .then(res => res.data)\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false) => {\r\n        return instance.post<ResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n};","import  {SET_USER_DATA} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {authApi} from \"../../api/authApi\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type AuthActionsTypes = SetAuthUserDataActionType\r\n\r\ntype SetAuthUserDataActionDataType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    data: SetAuthUserDataActionDataType\r\n}\r\n\r\nexport const setAuthUserData = (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n): SetAuthUserDataActionType => {\r\n    return {\r\n        type: SET_USER_DATA, data: {userId, email, login, isAuth}\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const authMe = () => async (dispatch: Dispatch<AuthActionsTypes>) => {\r\n    let res = await authApi.getAuth()\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        let {id, login, email} = res.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const LoginUser = (\r\n    email: string,\r\n    login: string,\r\n    rememberMe: boolean\r\n) => async (dispatch: any) => {\r\n    let res = await authApi.login(email, login, rememberMe)\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(authMe())\r\n    } else {\r\n        const msg = res.messages.length > 0 ? res.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: msg}))\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch: Dispatch<AuthActionsTypes>) => {\r\n    const res = await authApi.logout()\r\n\r\n    if (res.data.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n","import React, {FC} from 'react'\r\nimport {LoginReduxForm} from \"./LoginReduxForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './Login.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {LoginUser} from \"../../redux/actions/AuthActionCreators\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    userId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    LoginUser: (email: string, login: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nconst Login: FC<PropsType> = ({LoginUser, isAuth, userId}) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        LoginUser(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={`/profile/${userId}`} />\r\n\r\n    return (\r\n        <div className={classes.Login}>\r\n            <div className={classes.Login__content}>\r\n                <h1>Login Page</h1>\r\n\r\n                <LoginReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType): MapStatePropsType {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    LoginUser,\r\n})(Login)\r\n","import React from \"react\"\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {logoutUser} from \"../../redux/actions/AuthActionCreators\";\r\n\r\n\r\nexport const AppHeader: React.FC = () => {\r\n    const isAuth = useSelector( (state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutUser())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"site-layout-background\" style={{ padding: 0, backgroundColor: '#001529' }}>\r\n            <Row>\r\n                <Col span={22}>\r\n                    <span className={classes.Header__logo}>bitaev.SN</span>\r\n                </Col>\r\n\r\n                <Col span={2}>\r\n                    {\r\n                        isAuth\r\n                            ? <Button type=\"primary\" onClick={onClickHandler}>{'logout'}</Button>\r\n                            : <div>\r\n                                <NavLink className={classes.Header__login} to={'/login'}>login</NavLink>\r\n                            </div>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport function withSuspense<WCP>(WraperConponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>}>\r\n                <WraperConponent {...props}/>\r\n            </React.Suspense>\r\n    }\r\n}\r\n","import './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./Pages/Profile/Profile\";\r\nimport {Route, Switch, withRouter} from \"react-router-dom\";\r\n// import {Redirect} from \"react-router-dom\"\r\nimport News from \"./Pages/News/News\";\r\nimport Music from \"./Pages/Music/Music\";\r\nimport Settings from \"./Pages/Settings/Settings\";\r\nimport Login from \"./Pages/Login/Login\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/actions/AppActionCreator\";\r\nimport Loader from \"./components/Loader/Loader\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport {AppHeader} from \"./components/Header/Header\";\r\nimport {Footer} from \"antd/es/layout/layout\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n\r\nconst {Content, Sider } = Layout;\r\nconst DialogsLazy = React.lazy(() => import('./Pages/Dialogs/Dialogs'))\r\nconst UsersLazy = React.lazy(() => import('./Pages/Users/Users'))\r\nconst ChatPageLazy = React.lazy( () => import(\"./Pages/ChatPage/ChatPage\"))\r\nconst SuspenseDialogs = withSuspense(DialogsLazy)\r\nconst SuspenseUsers = withSuspense(UsersLazy)\r\nconst SuspenseChatPage = withSuspense(ChatPageLazy)\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype PropsTypes = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nclass App extends Component<PropsTypes> {\r\n    state = {\r\n        collapsed: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    onCollapse = (collapsed: any) => {\r\n        console.log(collapsed);\r\n        this.setState({collapsed});\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        if (!this.props.initialized) {\r\n            return <Loader/>\r\n        }\r\n        return (\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <AppHeader />\r\n                <Layout className=\"site-layout\">\r\n                    <Sider theme=\"light\" collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n                        <Navbar userId={null}/>\r\n                    </Sider>\r\n                    <Content style={{ margin: '0 16px' }} >\r\n                        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                             <Switch>\r\n                                 <Route path={'/profile/:id?'} exact={true} render={() => <Profile/>}/>\r\n                                 <Route path={'/dialogs'} render={() => <SuspenseDialogs/>}/>\r\n                                 <Route path={'/users'} render={() => <SuspenseUsers />}/>\r\n                                 <Route path={'/news'} component={News}/>\r\n                                 <Route path={'/music'} component={Music}/>\r\n                                 <Route path={'/settings'} component={Settings}/>\r\n                                 <Route path={'/login'} component={Login}/>\r\n                                 <Route path={'/chat'} component={SuspenseChatPage}/>\r\n                                 <Route path={'/'} render={() => <div> Home Page :3</div>}/>\r\n                                 {/*Редирект на профиль.*/}\r\n                                 {/*<Route path={'/'} render={ ()=> <Redirect to={'/profile'} /> }/>*/}\r\n                                 <Route path={'*'} exact render={() => <div>404 not found</div>}/>\r\n                             </Switch>\r\n                        </div>\r\n                        <Footer style={{ textAlign: 'center' }}>Social Network ©2020 Created by Bitaev Denis</Footer>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}),\r\n)(App);\r\n","import {INITIALIZED_SUCCESS} from \"./ActionTypes\";\r\nimport {authMe} from \"./AuthActionCreators\";\r\n\r\nexport type AppActionsTypes = initializedSuccessActionType\r\n\r\ntype initializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): initializedSuccessActionType => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS,\r\n    }\r\n}\r\n\r\n// THUNK\r\nexport const initializeApp = () => async (dispatch: any) => {\r\n    let promise = dispatch(authMe())\r\n\r\n    Promise.all([promise]).then( ()=> {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ADD_POST, SAVE_PHOTO_SUCCESS, SET_PROFILE_INFO, SET_PROFILE_STATUS} from \"../actions/ActionTypes\";\r\nimport {ProfileActionsTypes} from \"../actions/ProfileActionCreators\";\r\n\r\ntype InitialStatePostType = {\r\n    id: number\r\n    text: string\r\n}\r\ntype InitialStateType = {\r\n    posts: Array<InitialStatePostType>\r\n    profileInfo: {\r\n        contacts: {}\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    posts: [{id: 1, text: 'id1 text'},{id: 2, text: 'id2 text'}],\r\n    profileInfo: {\r\n        contacts: {},\r\n    },\r\n    photos: {\r\n        large: '',\r\n        small: '',\r\n    },\r\n    status: '',\r\n}\r\n\r\nconst ProfileReducer = (state = initialState, action: ProfileActionsTypes) => {\r\n    switch (action.type) {\r\n        case SET_PROFILE_STATUS:\r\n            return {\r\n                ...state, status: action.status,\r\n            }\r\n        case ADD_POST:\r\n            const arr = [...state.posts]\r\n            arr.push({id: state.posts.length, text: action.text})\r\n            return {\r\n                ...state, posts: arr,\r\n            }\r\n        case SET_PROFILE_INFO:\r\n            return {\r\n                ...state, profileInfo: {...action.data}, photos: {...action.data.photos}\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state, photos: {small: action.photo.small, large: action.photo.large}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ProfileReducer\r\n\r\n","import {ADD_MESSAGE} from \"../actions/ActionTypes\";\r\nimport {MessagesActionsTypes} from \"../actions/MessagesActionCreators\";\r\n\r\ntype InitialStateDialogsType = {\r\n    name: string\r\n    id: number\r\n}\r\ntype InitialStateMessagesType = {\r\n    name: string\r\n    text: string\r\n}\r\ntype InitialStateType = {\r\n    dialogs: Array<InitialStateDialogsType>\r\n    messages: Array<InitialStateMessagesType>\r\n    newMessageText: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    dialogs: [{name: 'Dima', id: 1}, {name: 'Lena', id: 2}, {name: 'Dimasol', id: 3}],\r\n    messages: [\r\n        {name: 'Dima', text: 'test steasd asd;ask asdkjl Asdj '},\r\n        {name: 'Dima', text: 'test steasd asd;ask asdkjl Asdj '},\r\n    ],\r\n    newMessageText: '',\r\n}\r\n\r\n\r\nconst MessagesReducer = (state = initialState, action: MessagesActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const msg = {\r\n                name: 'Dima',\r\n                text: action.message\r\n            }\r\n            const msgs = [...state.messages]\r\n            msgs.push(msg)\r\n            return {\r\n                ...state, messages: msgs , newMessageText: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default MessagesReducer\r\n","import {\r\n    CHANGE_CURRENT_PAGE, FOLLOW_FETCHING_TOGGLE,\r\n    FOLLOW_TOGGLE,\r\n    IS_FETCH_TOGGLE, SET_FILTERS,\r\n    SET_USERS,\r\n    SET_USERS_TOTAL_COUNT\r\n} from \"../actions/ActionTypes\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {UsersActionTypes} from \"../actions/UsersActionCreators\";\r\n\r\ntype InitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetch: boolean,\r\n    followFetchingId: Array<number>,\r\n    filter: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetch: false,\r\n    followFetchingId: [],\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst UsersReducer = (state = initialState, action: UsersActionTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW_TOGGLE:\r\n            return {\r\n                ...state, users: state.users.map( (item: any) => {\r\n                    if (+item.id === +action.id) {\r\n                        return {...item, followed: !item.followed}\r\n                    }\r\n                    return item\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.id,\r\n            }\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count,\r\n            }\r\n        case IS_FETCH_TOGGLE:\r\n            return {\r\n                ...state, isFetch: action.bool,\r\n            }\r\n        case FOLLOW_FETCHING_TOGGLE:\r\n            const prevArray = state.followFetchingId\r\n            let res\r\n            if (prevArray.indexOf( action.id ) === -1) {\r\n                res = [...state.followFetchingId, action.id]\r\n            } else {\r\n                res = [...state.followFetchingId.filter( i => i !== action.id)]\r\n            }\r\n            return {\r\n                ...state, followFetchingId: res,\r\n            }\r\n        case SET_FILTERS:\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    term: action.filter.term,\r\n                    friend: action.filter.friend\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// export type initialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport default UsersReducer\r\n\r\n\r\n","import {SET_USER_DATA} from \"../actions/ActionTypes\";\r\nimport {AuthActionsTypes} from \"../actions/AuthActionCreators\";\r\n\r\nexport type initialStateType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isFetching: boolean,\r\n    isAuth: boolean,\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n}\r\n\r\nconst AuthReducer = (state = initialState, action: AuthActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state, ...action.data, isAuth: action.data.isAuth,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default AuthReducer\r\n\r\n","import {INITIALIZED_SUCCESS} from \"../actions/ActionTypes\";\r\nimport {AppActionsTypes} from \"../actions/AppActionCreator\";\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst AppReducer = (state = initialState, action: AppActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default AppReducer\r\n","import {ChatMessageType} from \"../../Pages/ChatPage/ChatPage\";\r\nimport {ChatActionsTypes} from \"../actions/ChatActionCreators\";\r\nimport {MESSAGES_RECEIVED, STATUS_CHANGE} from \"../actions/ActionTypes\";\r\n\r\nexport type initialStateType = {\r\n    messages: Array<ChatMessageType>\r\n    status: string\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error';\r\nconst initialState: initialStateType = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType,\r\n}\r\n\r\nconst ChatReducer = (state = initialState, action: ChatActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case MESSAGES_RECEIVED:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...(action.payload)]\r\n            }\r\n        case STATUS_CHANGE:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ChatReducer\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport ProfileReducer from \"./reducers/ProfileReducer\";\r\nimport MessagesReducer from \"./reducers/MessagesReducer\";\r\nimport UsersReducer from \"./reducers/UsersReducer\";\r\nimport AuthReducer from \"./reducers/AuthReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport AppReducer from \"./reducers/AppReducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport ChatReducer from \"./reducers/ChatReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    form: formReducer,\r\n    chat: ChatReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n                <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export type ValidatorsType = (value: string) => string | undefined\r\n\r\nexport const requiredField: ValidatorsType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from \"react\";\r\nimport classes from './FormControls.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport {ValidatorsType} from \"../../utils/validate/validate\";\r\n\r\ntype PropsTypes = {\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    input: any\r\n}\r\n\r\nexport const TextArea:  React.FC<PropsTypes> = ({input, meta, ...props}) => {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : null)}>\r\n            <textarea className={classes.formControl__textArea} {...props} {...input} />\r\n            {\r\n                hasError\r\n                    ? <span className={classes.errorMessage}>{meta.error}</span>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<PropsTypes> = ({input, meta, ...props}) => {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : null)}>\r\n            <input className={classes.formControl__input} {...props} {...input} />\r\n            {\r\n                hasError\r\n                    ? <span className={classes.errorMessage}>{meta.error}</span>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (\r\n    placeholder: string,\r\n    name:string,\r\n    validators: Array<ValidatorsType>,\r\n    component: string | React.Component,\r\n    props ={},\r\n    text: string = ''\r\n) => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2zKDI\",\"formControl__input\":\"FormControls_formControl__input__31SRj\",\"errorMessage\":\"FormControls_errorMessage___S2dl\",\"formControl__textArea\":\"FormControls_formControl__textArea__1kHsS\",\"error\":\"FormControls_error__157_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileData\":\"ProfileData_ProfileData__3vep5\",\"ProfileData__inputInfo\":\"ProfileData_ProfileData__inputInfo__2bkKu\",\"ProfileData__info\":\"ProfileData_ProfileData__info__jAWTQ\",\"ProfileData__contacts\":\"ProfileData_ProfileData__contacts__1OOof\"};","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    const mapStateToProps = (state) => ({\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n\r\n\r\n    return connect(mapStateToProps, null)(RedirectComponent)\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Post_Container__3IdZg\",\"Post\":\"Post_Post__w9yQf\",\"Post__img\":\"Post_Post__img__1Mytx\",\"Post__text\":\"Post_Post__text__1rB-k\"};"],"sourceRoot":""}