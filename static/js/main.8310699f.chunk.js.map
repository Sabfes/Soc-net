{"version":3,"sources":["Pages/Profile/myPosts/MyPosts.module.css","Pages/Users/Paginator/Paginator.module.css","Pages/Profile/ProfileInfo/ProfileInfo.module.css","Pages/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","Pages/Profile/ProfileInfo/ProfileDataFormRedux/ProfileDataFormRedux.module.css","Pages/Profile/ProfileInfo/Contacts/Contact.module.css","Pages/Dialogs/DialogItem/DialogItem.module.css","Pages/Users/Users.module.css","components/Loader/Loader.module.css","Pages/Login/Login.module.css","components/Header/Header.module.css","Pages/Profile/Profile.module.css","components/Button/Button.module.css","Pages/News/News.module.css","Pages/Music/Music.module.css","Pages/Settings/Settings.module.css","api/api.ts","components/Navbar/Navbar.tsx","Pages/Profile/myPosts/Post/Post.tsx","utils/validate/validate.ts","components/FormControls/FormControls.tsx","Pages/Profile/myPosts/PostReduxForm/PostReduxForm.tsx","Pages/Profile/myPosts/MyPosts.tsx","Pages/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","img/avatar-profile.png","components/Button/Button.js","Pages/Profile/ProfileInfo/ProfileDataFormRedux/ProfileDataFormRedux.tsx","Pages/Profile/ProfileInfo/Contacts/Contact.tsx","Pages/Profile/ProfileInfo/ProfileData/ProfileData.tsx","Pages/Profile/ProfileInfo/ProfileInfo.tsx","redux/actions/ActionTypes.ts","api/profileApi.ts","redux/actions/ProfileActionCreators.ts","Pages/Profile/Profile.tsx","Pages/Dialogs/Message/Message.tsx","Pages/Dialogs/DialogItem/DialogItem.tsx","hoc/withAuthRedirect.js","Pages/Dialogs/MsgFormRedux/MsgFormRedux.tsx","Pages/Dialogs/Dialogs.tsx","redux/actions/MessagesActionCreators.ts","Pages/News/News.tsx","audio/audio-boyka.mp3","Pages/Music/Music.tsx","Pages/Settings/Settings.tsx","Pages/Users/User/UserCard.tsx","Pages/Users/Paginator/Paginator.tsx","api/usersApi.ts","redux/actions/UsersActionCreators.ts","components/Loader/Loader.tsx","Pages/Users/UsersSearchForm/UsersSearchForm.tsx","Pages/Users/Users.tsx","Pages/Login/LoginReduxForm.tsx","api/authApi.ts","redux/actions/AuthActionCreators.ts","Pages/Login/Login.tsx","components/Header/Header.tsx","App.tsx","redux/actions/AppActionCreator.ts","reportWebVitals.js","redux/reducers/ProfileReducer.ts","redux/reducers/MessagesReducer.ts","redux/reducers/UsersReducer.ts","redux/reducers/AuthReducer.ts","redux/reducers/AppReducer.ts","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/FormControls/FormControls.module.css","Pages/Profile/ProfileInfo/ProfileData/ProfileData.module.css","Pages/Dialogs/Dialogs.module.css","Pages/Users/User/UserCard.module.css","Pages/Profile/myPosts/Post/Post.module.css","Pages/Dialogs/Message/Message.module.css"],"names":["module","exports","ResultCodeEnum","connect","state","userId","auth","defaultSelectedKeys","mode","Item","icon","UserOutlined","className","classes","Navbar__link","to","activeClassName","Navbar__linkActive","MessageOutlined","TeamOutlined","DesktopOutlined","SoundOutlined","SettingOutlined","Post","props","Container","Post__img","src","alt","Post__text","text","requiredField","value","maxLengthCreator","maxLength","length","TextArea","input","meta","hasError","error","touched","formControl","formControl__textArea","errorMessage","Input","formControl__input","NewPostReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","MyPost__textarea","validate","component","name","MyPosts","MyPost","onChange","posts","map","post","i","ProfileStatus","desc","updateProfileStatus","isOwner","useState","editMode","setEditMode","status","setStatus","useEffect","onBlur","autoFocus","e","target","type","ProfileStatus_status","onDoubleClick","Button","ProfileDataFormRedux","profileInfo","style","color","marginTop","fontSize","MainInfo","MainInfo__job","Object","keys","contacts","item","index","Contact","title","Contact__link","ProfileData","ProfileData__info","ProfileData__inputInfo","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileData__contacts","ProfileInfo","ProfileInfo__avatarImg","avatarImg","large","defaultAvatar","files","savePhoto","onClick","initialValues","formData","updateProfileInfo","then","ADD_POST","SET_PROFILE_INFO","SET_PROFILE_STATUS","SAVE_PHOTO_SUCCESS","ADD_MESSAGE","FOLLOW_TOGGLE","SET_USERS","CHANGE_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","IS_FETCH_TOGGLE","FOLLOW_FETCHING_TOGGLE","SET_FILTERS","SET_USER_DATA","INITIALIZED_SUCCESS","instance","axios","create","withCredentials","baseURL","headers","profileApi","get","res","data","put","photo","FormData","append","setProfileStatus","getProfile","dispatch","a","Profile","updateProfile","isAuth","match","params","id","history","push","Error","getProfileStatus","onChangeHandler","addPost","newPostText","this","prevProps","prevState","photos","React","Component","compose","withRouter","profilePage","newPostTextUpdate","getState","resultCode","SUCCESS","console","log","stopSubmit","_error","messages","Promise","reject","file","Message","Message__info","Message__img","Message__text","DialogItem","DialogsItemActive","withAuthRedirect","RedirectComponent","AddMsgFormRedux","Dialogs__textarea","messagesPage","dialogs","addNewMessageActionCreator","message","Dialogs","Dialogs__container","Dialogs__lists","d","Dialogs__messages","m","s","newMsg","News","Music","controls","audioTest","Settings","UserCard","imgUrl","isFollow","btnDisabledIdArray","unFollow","follow","UserCard__left","UserCard__avatar","disabled","some","toString","UserCard__button","UserCard__right","Paginator","currentPage","changePage","pages","pageNumber","setPageNumber","leftBorder","rightBorder","filter","k","selectedPage","Paginator__item","Math","ceil","usersApi","pageSize","term","friend","delete","followToggle","changeCurrentPage","isFetchToggle","bool","followFetchingToggle","setFilter","requestUsers","users","count","items","totalCount","Loader","ldsEllipsis","UsersSearchForm","useSelector","usersPage","enableReinitialize","String","values","setSubmitting","onFilterChanged","isSubmitting","as","totalUsersCount","followFetchingId","isFetch","useDispatch","useHistory","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","unFollowHandler","followHandler","pagesCount","Users","Users__container","u","followed","small","LoginReduxForm","authApi","email","password","rememberMe","setAuthUserData","login","authMe","LoginUser","msg","Login","Login__content","AppHeader","padding","backgroundColor","span","Header__logo","Header__login","Content","Layout","Sider","App","collapsed","onCollapse","setState","initializeApp","initialized","minHeight","theme","collapsible","margin","path","exact","render","textAlign","app","promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","ProfileReducer","action","arr","newMessageText","MessagesReducer","msgs","UsersReducer","prevArray","indexOf","isFetching","AuthReducer","AppReducer","rootReducer","combineReducers","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8310699f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPost__textarea\":\"MyPosts_MyPost__textarea__3GPnL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Paginator\":\"Paginator_Paginator__31iv1\",\"Paginator__item\":\"Paginator_Paginator__item__234dI\",\"selectedPage\":\"Paginator_selectedPage__3TjlG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__Qz6kx\",\"ProfileInfo__description\":\"ProfileInfo_ProfileInfo__description__3Oajh\",\"ProfileInfo__avatarImg\":\"ProfileInfo_ProfileInfo__avatarImg__35jl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileStatus\":\"ProfileStatus_ProfileStatus__3y50i\",\"ProfileStatus_status\":\"ProfileStatus_ProfileStatus_status__2ESIJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainInfo\":\"ProfileDataFormRedux_MainInfo__3RmED\",\"MainInfo__job\":\"ProfileDataFormRedux_MainInfo__job__2OPZq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contact\":\"Contact_Contact__2oWNB\",\"Contact__link\":\"Contact_Contact__link__223Mr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DialogItem\":\"DialogItem_DialogItem__3JBIV\",\"DialogsItemActive\":\"DialogItem_DialogsItemActive__34o5l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Users\":\"Users_Users__1sqOy\",\"Users__button\":\"Users_Users__button__1k46x\",\"Users__container\":\"Users_Users__container__3kzvl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Loader_Container__37vW8\",\"ldsEllipsis\":\"Loader_ldsEllipsis__z4-M-\",\"ldsEllipsis1\":\"Loader_ldsEllipsis1__jxmmq\",\"ldsEllipsis2\":\"Loader_ldsEllipsis2__q9sd3\",\"ldsEllipsis3\":\"Loader_ldsEllipsis3__f5vGN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__ZfgQq\",\"Login__content\":\"Login_Login__content__3Ak9R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header__logo\":\"Header_Header__logo__SM7g_\",\"Header__login\":\"Header_Header__login__Dv4VF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"Profile_ProfileInfo__2cRkl\",\"ProfileInfo__background\":\"Profile_ProfileInfo__background__1HFpH\",\"PostContainer\":\"Profile_PostContainer__2UOfg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__pQN7A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"News\":\"News_News__3anGl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Music\":\"Music_Music__DPSnp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Settings\":\"Settings_Settings__n186p\"};","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"71a0323c-7ff9-4763-8740-70e9a845b5eb\",\r\n    }\r\n})\r\n\r\nexport enum ResultCodeEnum {\r\n    SUCCESS = 0,\r\n    ERROR = 1,\r\n}\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React from 'react'\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Menu} from \"antd\";\r\nimport {DesktopOutlined, UserOutlined, MessageOutlined, TeamOutlined ,SettingOutlined,SoundOutlined , } from \"@ant-design/icons\";\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nconst Navbar: React.FC<MapStateToPropsType> = ({userId}) => {\r\n    return (\r\n        <Menu defaultSelectedKeys={['1']} mode=\"inline\">\r\n            <Menu.Item key=\"1\" icon={<UserOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/profile/' + userId}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Profile\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<MessageOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/dialogs'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Messages\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<TeamOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/users'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Users\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"4\" icon={<DesktopOutlined />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/news'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    News\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"5\" icon={<SoundOutlined  />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/music'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Music\r\n                </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"6\" icon={<SettingOutlined  />}>\r\n                <NavLink\r\n                    className={classes.Navbar__link}\r\n                    to={'/settings'}\r\n                    activeClassName={classes.Navbar__linkActive}\r\n                >\r\n                    Settings\r\n                </NavLink>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Navbar)\r\n","import React from 'react'\r\nimport classes from './Post.module.css'\r\n\r\ntype PropsTypes = {\r\n    text: String\r\n}\r\n\r\nconst Post: React.FC<PropsTypes> = props => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.Post}>\r\n                <img className={classes.Post__img} src=\"http://cdn.onlinewebfonts.com/svg/img_167183.png\" alt=\"post_img\"/>\r\n                <span className={classes.Post__text} >{props.text}</span>\r\n            </div>\r\n            <span>like</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","export type ValidatorsType = (value: string) => string | undefined\r\n\r\nexport const requiredField: ValidatorsType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): ValidatorsType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import React from \"react\";\r\nimport classes from './FormControls.module.css'\r\nimport {Field} from \"redux-form\";\r\nimport {ValidatorsType} from \"../../utils/validate/validate\";\r\n\r\ntype PropsTypes = {\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    input: any\r\n}\r\n\r\nexport const TextArea:  React.FC<PropsTypes> = ({input, meta, ...props}) => {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : null)}>\r\n            <textarea className={classes.formControl__textArea} {...props} {...input} />\r\n            {\r\n                hasError\r\n                    ? <span className={classes.errorMessage}>{meta.error}</span>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<PropsTypes> = ({input, meta, ...props}) => {\r\n    const hasError = meta.error && meta.touched\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : null)}>\r\n            <input className={classes.formControl__input} {...props} {...input} />\r\n            {\r\n                hasError\r\n                    ? <span className={classes.errorMessage}>{meta.error}</span>\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (\r\n    placeholder: string,\r\n    name:string,\r\n    validators: Array<ValidatorsType>,\r\n    component: string | React.Component,\r\n    props ={},\r\n    text: string = ''\r\n) => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            /> {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validate/validate\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport classes from \"../MyPosts.module.css\";\r\nimport {TextArea} from \"../../../../components/FormControls/FormControls\";\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\n\r\ntype newPostValueType = {\r\n    newPostText: string,\r\n    handleSubmit: () => void,\r\n}\r\n\r\nconst newPostForm: React.FC<InjectedFormProps<newPostValueType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                placeholder={'Post message'}\r\n                className={classes.MyPost__textarea}\r\n                validate={[requiredField, maxLength]}\r\n                component={TextArea}\r\n                name={'newPostText'}\r\n            />\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const NewPostReduxForm = reduxForm<newPostValueType>({\r\n    form: 'ProfileNewPostForm'\r\n})(newPostForm)\r\n","import React from 'react'\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {NewPostReduxForm} from \"./PostReduxForm/PostReduxForm\";\r\n\r\n\r\ntype PropsType = {\r\n    onChange: (data: any) => void\r\n    posts: Array<{text: string}>\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = props => {\r\n    return (\r\n        <div className={classes.MyPost}>\r\n            <h1>My posts</h1>\r\n\r\n            <NewPostReduxForm onSubmit={props.onChange}/>\r\n\r\n            {\r\n                props.posts.map( (post, i) => {\r\n                    return <Post key={i} text={post.text}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default MyPosts\r\n","import React, {useEffect, useState} from 'react'\r\nimport classes from './ProfileStatus.module.css'\r\n\r\ntype PropsTypes = {\r\n    updateProfileStatus: (status: string) => void\r\n    desc: string\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatus: React.FC<PropsTypes> = ({desc, updateProfileStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(desc || 'desc')\r\n\r\n    useEffect(()=>{\r\n        setStatus(desc)\r\n    }, [desc])\r\n\r\n    const onChangeProfileStatus = () => {\r\n        setEditMode(false)\r\n        updateProfileStatus(status)\r\n    }\r\n    return (\r\n        <div className={classes.ProfileStatus}>\r\n            Status:\r\n            {\r\n                editMode\r\n                    ?   <input\r\n                        onBlur={onChangeProfileStatus}\r\n                        autoFocus={true}\r\n                        onChange={(e) => {setStatus(e.target.value)}}\r\n                        value={status}\r\n                        type='text'\r\n                    />\r\n                    :   <span className={classes.ProfileStatus_status} onDoubleClick={ () => {\r\n                            if (isOwner) {\r\n                                setEditMode(true)\r\n                            }\r\n                        }}>\r\n                            {status}\r\n                        </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/avatar-profile.2d4393d1.png\";","import React from 'react'\r\nimport classes from './Button.module.css'\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <button {...props} className={classes.Button}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from \"react\";\r\nimport classes from \"./ProfileDataFormRedux.module.css\";\r\nimport {Input, TextArea} from \"../../../../components/FormControls/FormControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {requiredField} from \"../../../../utils/validate/validate\";\r\nimport Button from \"../../../../components/Button/Button\";\r\nimport {ProfileDataType, ContactsType} from '../../../../types/types'\r\n\r\ntype ProfileDataFormValue = {\r\n    aboutMe: String,\r\n    lookingForAJob: Boolean,\r\n    lookingForAJobDescription: String,\r\n    fullName: String,\r\n    contacts: ContactsType,\r\n    handleSubmit: () => void,\r\n    initialValues: any,\r\n}\r\ntype PropsTypes = {\r\n    profileInfo: ProfileDataType,\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormValue, PropsTypes> & PropsTypes> = ({\r\n    handleSubmit,\r\n    error,\r\n    profileInfo\r\n     }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Button\r\n                type=\"submit\"\r\n                value=\"save\"\r\n            />\r\n\r\n            {\r\n                error\r\n                    ? <div style={{color: 'red', marginTop: '20px', fontSize: '24px'}}>\r\n                        {error}\r\n                    </div>\r\n                    : null\r\n            }\r\n\r\n            <div className={classes.MainInfo}>\r\n                <div>\r\n                    <p>Full Name:</p>\r\n                    <Field component={Input} validate={[requiredField]} name={'fullName'} placeholder='FullName'/>\r\n                </div>\r\n\r\n                <div className={classes.MainInfo__job}>\r\n                    <p>Looking For a job?</p>\r\n                    <Field component={Input} validate={[]} name={'lookingForAJob'} placeholder='Looking For a job?' type={'checkbox'}/>\r\n                </div>\r\n                <div>\r\n                    <p>Job Description:</p>\r\n                    <Field component={TextArea} validate={[requiredField]} name={'lookingForAJobDescription'} placeholder='job Description'/>\r\n                </div>\r\n                <div>\r\n                    <p>About Me:</p>\r\n                    <Field component={TextArea} validate={[requiredField]} name={'aboutMe'} placeholder='AboutMe'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                Contacts:\r\n                {\r\n                    Object.keys(profileInfo.contacts).map((item, index) => {\r\n                        return <div key={index}>\r\n                            <Field component={Input} validate={[]} name={'contacts.' + item} placeholder={item}/>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormRedux = reduxForm<ProfileDataFormValue,PropsTypes>({\r\n    form: 'profileData',\r\n})(ProfileDataForm)\r\n\r\n","import React from 'react'\r\nimport classes from './Contact.module.css'\r\n\r\ntype PropsTypes = {\r\n    value: String,\r\n    title: String\r\n}\r\n\r\nconst Contact: React.FC<PropsTypes> = ({title, value}) => {\r\n    return (\r\n        <div className={classes.Contact}>\r\n            {title}: <span className={classes.Contact__link}>{value || '-'}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from \"react\";\r\nimport classes from \"./ProfileData.module.css\";\r\nimport Contact from \"../Contacts/Contact\";\r\n\r\ntype PropsTypes = {\r\n    profileInfo: any\r\n}\r\n\r\nconst ProfileData: React.FC<PropsTypes> = ({profileInfo}) => {\r\n    return (\r\n        <div className={classes.ProfileData}>\r\n            {/*Описание профиля*/}\r\n            <div className={classes.ProfileData__info}>\r\n                <div>\r\n                    Fullname:\r\n                    <span className={classes.ProfileData__inputInfo}>\r\n                        {profileInfo.fullName}\r\n                    </span>\r\n                </div>\r\n                <div>\r\n                    looking For A Job:\r\n                    <span className={classes.ProfileData__inputInfo}>\r\n                        {profileInfo.lookingForAJob ? 'yes' : 'no'}\r\n                    </span>\r\n                </div>\r\n                {/*Показываем описание поиска работы, если поиск работы === true*/}\r\n                {\r\n                    profileInfo.lookingForAJob\r\n                        ? <div>\r\n                            looking For A Job Description:\r\n                            <span className={classes.ProfileData__inputInfo}>\r\n                                {profileInfo.lookingForAJobDescription}\r\n                            </span>\r\n                        </div>\r\n                        : null\r\n                }\r\n                <div>\r\n                    aboutMe: <span className={classes.ProfileData__inputInfo}>{profileInfo.aboutMe}</span>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.ProfileData__contacts}>\r\n                Contacts:\r\n                {\r\n                    Object.keys(profileInfo.contacts).map(item => {\r\n                        return <Contact key={item} title={item} value={profileInfo.contacts[item]}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileData\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\"\r\nimport defaultAvatar from '../../../img/avatar-profile.png'\r\nimport {ProfileDataFormRedux} from \"./ProfileDataFormRedux/ProfileDataFormRedux\"\r\nimport ProfileData from \"./ProfileData/ProfileData\"\r\nimport Button from \"../../../components/Button/Button\"\r\nimport {ProfileDataType} from \"../../../types/types\"\r\n\r\ntype PropsType = {\r\n    savePhoto: (photo: any) => void,\r\n    updateProfileInfo: (profileInfo: ProfileDataType) => Promise<any>,\r\n    updateProfileStatus: (status: string) => void,\r\n\r\n    profileInfo: any,\r\n    avatarImg: {\r\n        large: string,\r\n        small: string,\r\n    },\r\n    isOwner: boolean,\r\n    desc: string,\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onAvatarSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.updateProfileInfo(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ProfileInfo}>\r\n            {/*Аватар профиля*/}\r\n            <img\r\n                className={classes.ProfileInfo__avatarImg}\r\n                src={props.avatarImg.large || defaultAvatar}\r\n                alt=\"avatar-img\"\r\n            />\r\n            {/*Показываем кнопку загрузки фотографии, если страница - владельца.*/}\r\n            {\r\n                props.isOwner\r\n                    ? <input type={\"file\"} onChange={onAvatarSelected}/>\r\n                    : null\r\n            }\r\n            <ProfileStatus\r\n                isOwner={props.isOwner}\r\n                updateProfileStatus={props.updateProfileStatus}\r\n                desc={props.desc}\r\n            />\r\n\r\n            {/*Показываем кнопку настройки, если страница - владельца.*/}\r\n            {\r\n                props.isOwner && !editMode\r\n                    ? <Button onClick={() => {\r\n                        setEditMode(true)\r\n                    }}\r\n                              value={'edit'}\r\n                    />\r\n                    : null\r\n            }\r\n            {/*Показываем форму настройки если включен editMode*/}\r\n            {\r\n                editMode\r\n                    ? <ProfileDataFormRedux\r\n                        profileInfo={props.profileInfo}\r\n                        initialValues={props.profileInfo}\r\n                        onSubmit={onSubmit}\r\n                    />\r\n                    : <ProfileData\r\n                        profileInfo={props.profileInfo}\r\n                    />\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo\r\n","// ACTION TYPE\r\n\r\n// PROFILE\r\nexport const NEW_POST_TEXT = 'profile/NEW_POST_TEXT'\r\nexport const ADD_POST = 'profile/ADD_POST'\r\nexport const SET_PROFILE_INFO = 'profile/SET_PROFILE_INFO'\r\nexport const SET_PROFILE_STATUS = 'profile/SET_PROFILE_STATUS'\r\nexport const SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS'\r\n\r\n\r\n// MESSAGES\r\nexport const ADD_MESSAGE = 'message/ADD_MESSAGE'\r\nexport const NEW_MESSAGE_TEXT = 'message/NEW_MESSAGE_TEXT'\r\n\r\n// USERS\r\nexport const FOLLOW_TOGGLE = 'users/FOLLOW_TOGGLE'\r\nexport const SET_USERS = 'users/SET_USERS'\r\nexport const CHANGE_CURRENT_PAGE = 'users/CHANGE_CURRENT_PAGE'\r\nexport const SET_USERS_TOTAL_COUNT = 'users/SET_USERS_TOTAL_COUNT'\r\nexport const IS_FETCH_TOGGLE = 'users/IS_FETCH_TOGGLE'\r\nexport const FOLLOW_FETCHING_TOGGLE = 'users/FOLLOW_FETCHING_TOGGLE'\r\nexport const SET_FILTERS = 'users/SET_FILTERS'\r\n\r\n//Auth\r\nexport const SET_USER_DATA = 'auth/SET_USER_DATA'\r\nexport const IS_AUTH_TOGGLE = 'auth/IS_AUTH_TOGGLE'\r\n\r\n//APP\r\nexport const INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS'\r\n","import {instance, ResponseType} from \"./api\";\r\nimport {PhotosType, ProfileDataType} from \"../types/types\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileApi = {\r\n    getProfile: (userId: number) => {\r\n        return instance.get<ProfileDataType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getProfileStatus: (userId: number) => {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updateProfileStatus: (status: string) => {\r\n        return instance.put<ResponseType>(`profile/status`,{status})\r\n            .then(res => res.data)\r\n    },\r\n    updateProfileInfo: (data: any) => {\r\n        return instance.put(`profile/`, data)\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto: (photo: any) => {\r\n        const formData = new FormData()\r\n        formData.append(\"image\", photo)\r\n\r\n        return instance.put<ResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    }\r\n};\r\n","import {ADD_POST, NEW_POST_TEXT, SAVE_PHOTO_SUCCESS, SET_PROFILE_INFO, SET_PROFILE_STATUS} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {profileApi} from \"../../api/profileApi\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppStateType} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ProfileDataType} from \"../../types/types\";\r\n\r\nexport type ProfileActionsTypes = AddPostType | SavePhotoSuccessType | NewPostTextUpdateType |\r\n    SetProfileStatusType | NewPostTextUpdateType | SetProfileStatusType | SetProfileInfoType\r\n\r\n// ACTION CREATORS\r\ntype AddPostType = {\r\n    type: typeof ADD_POST\r\n    text: string\r\n}\r\n\r\nexport const addPost = (text: string): AddPostType => {\r\n    return {\r\n        type: ADD_POST, text\r\n    }\r\n}\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photo: any\r\n}\r\n\r\nexport const savePhotoSuccess = (photo: any): SavePhotoSuccessType => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS, photo,\r\n    }\r\n}\r\n\r\ntype NewPostTextUpdateType = {\r\n    type: typeof NEW_POST_TEXT\r\n    text: string\r\n}\r\n\r\nexport const newPostTextUpdate = (text:string): NewPostTextUpdateType => {\r\n    return {\r\n        type: NEW_POST_TEXT, text\r\n    }\r\n}\r\n\r\ntype SetProfileInfoType = {\r\n    type: typeof SET_PROFILE_INFO\r\n    data: ProfileDataType\r\n}\r\n\r\nexport const setProfileInfo = (data: ProfileDataType): SetProfileInfoType => {\r\n    return {\r\n        type: SET_PROFILE_INFO, data\r\n    }\r\n}\r\n\r\ntype SetProfileStatusType = {\r\n    type: typeof SET_PROFILE_STATUS\r\n    status: string\r\n}\r\n\r\nexport const setProfileStatus = (status: string): SetProfileStatusType => {\r\n    return {\r\n        type: SET_PROFILE_STATUS, status,\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const updateProfileInfo = (data: any) => async (dispatch: any, getState: ()=> AppStateType) => {\r\n    const userId = getState().auth.userId\r\n    const res = await profileApi.updateProfileInfo(data)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        if (userId !== null) {\r\n            dispatch(getProfile(userId))\r\n        } else {\r\n            console.log('userId = null')\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit('profileData', {_error: res.messages[0]}))\r\n        return Promise.reject(res.messages[0])\r\n    }\r\n\r\n}\r\n\r\nexport const getProfile = (userId:number) => async (dispatch: any) => {\r\n    const res = await profileApi.getProfile(userId)\r\n\r\n    dispatch(setProfileInfo(res))\r\n}\r\n\r\nexport const getProfileStatus = (userId:number) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.getProfileStatus(userId)\r\n\r\n    dispatch(setProfileStatus(res))\r\n}\r\n\r\nexport const updateProfileStatus = (status:string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.updateProfileStatus(status)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(setProfileStatus(status))\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: string) => async (dispatch: Dispatch<ProfileActionsTypes>) => {\r\n    const res = await profileApi.savePhoto(file)\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(savePhotoSuccess(res.data.photos))\r\n    }\r\n}","import React, {ComponentType} from 'react'\r\nimport classes from './Profile.module.css'\r\nimport MyPosts from \"./myPosts/MyPosts\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addPost,\r\n    getProfile,\r\n    getProfileStatus,\r\n    newPostTextUpdate,\r\n    updateProfileStatus,\r\n    savePhoto, updateProfileInfo\r\n} from \"../../redux/actions/ProfileActionCreators\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileDataType} from \"../../types/types\";\r\n\r\nexport type NewPostType = {\r\n    newPostText: string\r\n}\r\ntype MapStateToProps = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    newPostTextUpdate: (newPostText: string) => void,\r\n    addPost: (text: any) => void,\r\n    getProfile: (userId: number) => void,\r\n    updateProfileInfo: (info: ProfileDataType) => Promise<any>,\r\n    updateProfileStatus: (status: string) => void,\r\n    getProfileStatus: (userId: number) => void,\r\n    savePhoto: (photo: any) => void,\r\n}\r\ntype PathParamsType = {\r\n    id: string,\r\n}\r\n\r\n\r\ntype PropsType = MapStateToProps & MapDispatchToProps & RouteComponentProps<PathParamsType>;\r\n\r\nclass Profile extends React.Component<PropsType> {\r\n    updateProfile = () => {\r\n        if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        let userId: number | null = +this.props.match.params.id\r\n        if (!userId) {\r\n            userId = this.props.userId;\r\n            if (!userId) {\r\n                this.props.history.push('/login ')\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            throw new Error('Id should exist in URL params or in state')\r\n        } else {\r\n            this.props.getProfile(userId as number)\r\n            this.props.getProfileStatus(userId as number)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.id !== prevProps.match.params.id) {\r\n            this.updateProfile()\r\n        }\r\n    }\r\n\r\n    onChangeHandler = (data: any) => {\r\n        this.props.addPost(data.newPostText)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <main className={classes.ProfileInfo}>\r\n                <ProfileInfo\r\n                    updateProfileInfo={this.props.updateProfileInfo}\r\n                    profileInfo={this.props.profileInfo}\r\n                    isOwner={+this.props.match.params.id === this.props.userId}\r\n                    updateProfileStatus={this.props.updateProfileStatus}\r\n                    avatarImg={this.props.photos}\r\n                    desc={this.props.status}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n                <MyPosts\r\n                    onChange={this.onChangeHandler}\r\n                    posts={this.props.posts}\r\n                />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profileInfo: state.profilePage.profileInfo,\r\n        status: state.profilePage.status,\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId,\r\n        photos: state.profilePage.photos,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        newPostTextUpdate,\r\n        addPost,\r\n        getProfile,\r\n        updateProfileInfo,\r\n        updateProfileStatus,\r\n        getProfileStatus,\r\n        savePhoto,\r\n    })\r\n)(Profile)\r\n","import React from 'react'\r\nimport classes from './Message.module.css'\r\n\r\ntype PropsTypes = {\r\n    name: String,\r\n    text: String,\r\n}\r\n\r\nconst Message: React.FC<PropsTypes> = ({name, text}) => {\r\n    return (\r\n        <div className={classes.Message}>\r\n            <div className={classes.Message__info}>\r\n                <img className={classes.Message__img} src=\"http://cdn.onlinewebfonts.com/svg/download_508630.png\" alt=\"avatar\"/>\r\n                <span>{name}</span>\r\n            </div>\r\n            <p className={classes.Message__text}>{text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsTypes = {\r\n    id: Number,\r\n    name: String,\r\n}\r\n\r\nconst DialogItem: React.FC<PropsTypes> = ({id, name}) => {\r\n    return (\r\n        <NavLink\r\n            className={classes.DialogItem}\r\n            to={`/dialogs/${id}`}\r\n            activeClassName={classes.DialogsItemActive}\r\n        >\r\n            {name}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    const mapStateToProps = (state) => ({\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n\r\n\r\n    return connect(mapStateToProps, null)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport classes from \"../Dialogs.module.css\";\r\nimport {TextArea} from \"../../../components/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validate/validate\";\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\ntype AddNewMsgValuesType = {\r\n    handleSubmit: () => void\r\n}\r\n\r\nconst addMsgForm: React.FC<InjectedFormProps<AddNewMsgValuesType>> = ({handleSubmit, }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field\r\n                component={TextArea}\r\n                name={'newMsg'}\r\n                placeholder={'text'}\r\n                validate={[requiredField, maxLength]}\r\n                className={classes.Dialogs__textarea}\r\n            >\r\n            </Field>\r\n            <button>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMsgFormRedux = reduxForm<AddNewMsgValuesType>({\r\n    form: 'dialogAddMessageForm'\r\n})(addMsgForm)\r\n","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {addNewMessageActionCreator} from \"../../redux/actions/MessagesActionCreators\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AddMsgFormRedux} from \"./MsgFormRedux/MsgFormRedux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype PropsTypes = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapStateToProps = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToProps = {\r\n    addNewMessageActionCreator: (newMsg: String) => void\r\n}\r\n\r\nconst Dialogs: React.FC<MapStateToProps & MapDispatchToProps & PropsTypes> = ({isAuth, messages,dialogs,addNewMessageActionCreator}) => {\r\n    const addNewMsg = (s: any): void => {\r\n        addNewMessageActionCreator(s.newMsg)\r\n    }\r\n\r\n    if (!isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={classes.Dialogs}>\r\n            <h1>Dialogs</h1>\r\n\r\n            <div className={classes.Dialogs__container}>\r\n                {/*Список диалогов*/}\r\n                <div className={classes.Dialogs__lists}>\r\n                    {\r\n                        dialogs.map( (d,i)=> {\r\n                            return <DialogItem key={i} name={d.name} id={d.id} />\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n                {/*Сообщения*/}\r\n                <div className={classes.Dialogs__messages}>\r\n\r\n                    {\r\n                        messages.map( (m, i) => {\r\n                            return <Message key={i} name={m.name} text={m.text} />\r\n                        })\r\n                    }\r\n\r\n                    <AddMsgFormRedux onSubmit={addNewMsg}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        messages: state.messagesPage.messages,\r\n        dialogs: state.messagesPage.dialogs,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {addNewMessageActionCreator}),\r\n    withAuthRedirect,\r\n)(Dialogs) as React.ComponentType\r\n","import {ADD_MESSAGE} from \"./ActionTypes\";\r\n\r\nexport type MessagesActionsTypes = AddNewMessageActionCreatorType\r\n\r\ntype AddNewMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE\r\n    message: string\r\n}\r\n\r\nexport const addNewMessageActionCreator = (message: string): AddNewMessageActionCreatorType => {\r\n    return {\r\n        type: ADD_MESSAGE, message,\r\n    }\r\n}\r\n","import React from 'react'\r\nimport classes from './News.module.css'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst News: React.FC = () => {\r\n    return (\r\n        <div className={classes.News}>\r\n            <h1>News</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(News)\r\n","export default __webpack_public_path__ + \"static/media/audio-boyka.dea5dbfe.mp3\";","import React from 'react'\r\nimport classes from './Music.module.css'\r\n// @ts-ignore\r\nimport audioTest from '../../audio/audio-boyka.mp3'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst Music: React.FC = () => {\r\n    const audioPlayHandler = (e: any): void => {\r\n        console.log(e.target)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Music}>\r\n            <h1>Music</h1>\r\n\r\n            <div onClick={audioPlayHandler}>\r\n                <p>Miya Boyko - AUF</p>\r\n                <audio controls>\r\n                    <source src={audioTest} type=\"audio/mpeg\"/>\r\n                </audio>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Music)\r\n","import React from 'react'\r\nimport classes from './Settings.module.css'\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nconst Settings: React.FC = () => {\r\n    return (\r\n        <div className={classes.Settings}>\r\n            <h1>Settings</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Settings)\r\n","import React from 'react'\r\nimport classes from './UserCard.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultAvatar from '../../../img/avatar-profile.png'\r\n\r\ntype PropsTypes = {\r\n    id: number\r\n    imgUrl: string | null\r\n    isFollow: boolean | undefined\r\n    btnDisabledIdArray: Array<number>\r\n    unFollow: (id: number) => void\r\n    follow: (id: number) => void\r\n    name: string\r\n    status: string\r\n}\r\n\r\nconst UserCard: React.FC<PropsTypes> =\r\n    ({\r\n         id,\r\n         imgUrl,\r\n         isFollow,\r\n         btnDisabledIdArray,\r\n         unFollow,\r\n         name,\r\n         status,\r\n         follow\r\n     }) => {\r\n        return (\r\n            <div className={classes.UserCard}>\r\n                <div className={classes.UserCard__left}>\r\n                    <NavLink to={'/profile/' + id}>\r\n                        <img className={classes.UserCard__avatar}\r\n                             src={imgUrl !== null ? imgUrl : defaultAvatar}\r\n                             alt=\"avatar\"\r\n                        />\r\n                    </NavLink>\r\n                    {\r\n                        isFollow\r\n                            ? <button\r\n                                disabled={btnDisabledIdArray.some(i => i === id) ? true : false}\r\n                                id={id.toString()}\r\n                                onClick={() => unFollow(id)}\r\n                                className={classes.UserCard__button}\r\n                            >\r\n                                {\"UNFOLLOW\"}\r\n                            </button>\r\n                            : <button\r\n                                disabled={btnDisabledIdArray.some(i => i === id) ? true : false}\r\n                                id={id.toString()}\r\n                                onClick={() => {\r\n                                    follow(id)\r\n                                }}\r\n                                className={classes.UserCard__button}\r\n                            >\r\n                                {\"FOLLOW\"}\r\n                            </button>\r\n                    }\r\n                </div>\r\n\r\n                <div className={classes.UserCard__right}>\r\n                    <span>{name}</span>\r\n                    <span>{status}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default UserCard\r\n","import React from 'react'\r\nimport classes from './Paginator.module.css'\r\nimport {useState} from 'react'\r\n\r\ntype PropsTypes = {\r\n    currentPage: number\r\n    changePage: (e: any) => void\r\n    pages: Array<number>\r\n}\r\n\r\nconst Paginator: React.FC<PropsTypes> = ({currentPage, changePage, pages}) => {\r\n    const pagesQuantity = 10\r\n    const [pageNumber, setPageNumber] = useState(1)\r\n    const leftBorder = (pageNumber - 1 ) * pagesQuantity\r\n    const rightBorder = pageNumber * pagesQuantity\r\n\r\n    const nextPage = () => {\r\n        if (Math.ceil(pages.length / pagesQuantity) > pageNumber) {\r\n            setPageNumber(prevState => prevState + 1)\r\n        }\r\n    }\r\n\r\n    const prefPage = () => {\r\n        if (1 < pageNumber) {\r\n            setPageNumber(prevState => prevState - 1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Paginator}>\r\n            <button onClick={prefPage}>-</button>\r\n            {pages\r\n                .filter( (i)=> i >=leftBorder && i <= rightBorder)\r\n                .map( (i, k)=> {\r\n                    return <span\r\n                        key={k}\r\n                        id={i.toString()}\r\n                        onClick={changePage}\r\n                        className={currentPage === i ? classes.selectedPage : classes.Paginator__item}\r\n                    >{i}</span>\r\n            })}\r\n            <button onClick={nextPage}>+</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import {instance, ResponseType} from \"./api\";\r\n\r\nexport const usersApi = {\r\n    getUsers: (currentPage: number = 1, pageSize: number = 100, term: string = '', friend: null | boolean = null) => {\r\n        return instance.get(\r\n            `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n            (friend === null ? '' : `&friend=${friend}`)\r\n        )\r\n    },\r\n    follow: (userId: number) => {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unFollow: (userId: number) => {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(res => res.data) as Promise<ResponseType>\r\n    },\r\n};\r\n","import {\r\n    CHANGE_CURRENT_PAGE,\r\n    FOLLOW_FETCHING_TOGGLE,\r\n    FOLLOW_TOGGLE,\r\n    IS_FETCH_TOGGLE,\r\n    SET_FILTERS,\r\n    SET_USERS,\r\n    SET_USERS_TOTAL_COUNT\r\n} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {usersApi} from \"../../api/usersApi\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {FilterType} from \"../reducers/UsersReducer\";\r\n\r\nexport type UsersActionTypes = FollowFetchingToggleType | SetUsersType | ChangeCurrentPageType |\r\n    SetTotalUsersCountType | IsFetchToggleType | FollowToggleType | SetFilterType\r\n\r\n// ACTION CREATORS\r\ntype FollowToggleType = {\r\n    type: typeof FOLLOW_TOGGLE\r\n    id: number\r\n}\r\n\r\nexport const followToggle = (id: number): FollowToggleType => {\r\n    return {\r\n        type: FOLLOW_TOGGLE, id,\r\n    }\r\n}\r\n\r\ntype SetUsersType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\n\r\nexport const setUsers = (users: Array<UserType>): SetUsersType => {\r\n    return {\r\n        type: SET_USERS, users,\r\n    }\r\n}\r\n\r\ntype ChangeCurrentPageType = {\r\n    type: typeof CHANGE_CURRENT_PAGE\r\n    id: number\r\n}\r\nexport const changeCurrentPage = (id: number): ChangeCurrentPageType => {\r\n    return {\r\n        type: CHANGE_CURRENT_PAGE, id,\r\n    }\r\n}\r\n\r\ntype SetTotalUsersCountType = {\r\n    type: typeof SET_USERS_TOTAL_COUNT\r\n    count: number\r\n}\r\nexport const setTotalUsersCount = (count: number): SetTotalUsersCountType => {\r\n    return {\r\n        type: SET_USERS_TOTAL_COUNT, count,\r\n    }\r\n}\r\n\r\ntype IsFetchToggleType = {\r\n    type: typeof IS_FETCH_TOGGLE\r\n    bool: boolean\r\n}\r\nexport const isFetchToggle = (bool: boolean): IsFetchToggleType => {\r\n    return {\r\n        type: IS_FETCH_TOGGLE, bool,\r\n    }\r\n}\r\n\r\ntype FollowFetchingToggleType = {\r\n    type: typeof FOLLOW_FETCHING_TOGGLE\r\n    id: number\r\n}\r\nexport const followFetchingToggle = (id: number): FollowFetchingToggleType => {\r\n    return {\r\n        type: FOLLOW_FETCHING_TOGGLE, id\r\n    }\r\n}\r\n\r\ntype SetFilterType = {\r\n    type: typeof SET_FILTERS\r\n    filter: FilterType\r\n}\r\n\r\nexport const setFilter = (filter: FilterType): SetFilterType => {\r\n    return {\r\n        type: SET_FILTERS, filter\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType) => {\r\n    return async (dispatch: Dispatch<UsersActionTypes>) => {\r\n        dispatch(isFetchToggle(true))\r\n        dispatch(changeCurrentPage(currentPage))\r\n        dispatch(setFilter(filter))\r\n\r\n        await usersApi.getUsers(currentPage, pageSize, filter.term, filter.friend).then(res => {\r\n            dispatch(setUsers(res.data.items))\r\n            dispatch(setTotalUsersCount(res.data.totalCount))\r\n            dispatch(isFetchToggle(false))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow = (id: number) => (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(followFetchingToggle(id))\r\n\r\n    usersApi.follow(id).then(res => {\r\n        if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n            dispatch(followToggle(id))\r\n            dispatch(followFetchingToggle(id))\r\n        }\r\n    })\r\n}\r\n\r\nexport const unFollow = (id: number) => (dispatch: Dispatch<UsersActionTypes>) => {\r\n    dispatch(followFetchingToggle(id))\r\n\r\n    usersApi.unFollow(id).then(res => {\r\n        if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n            dispatch(followToggle(id))\r\n            dispatch(followFetchingToggle(id))\r\n        }\r\n    })\r\n}\r\n","import React from 'react'\r\nimport classes from './Loader.module.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.ldsEllipsis}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../../redux/reducers/UsersReducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype PropsTypes = {\r\n    onFilterChanged: (filter: FilterType) => void,\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsTypes> = (props) => {\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n\r\n    const onSubmit = (values: FormType, {setSubmitting}: {setSubmitting :(isSubmitting: boolean) => void}) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={ (values) => {\r\n                const errors = {}\r\n                return errors;\r\n            }}\r\n            onSubmit={onSubmit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default UsersSearchForm\r\n","import React, {useEffect} from 'react';\r\nimport classes from './Users.module.css'\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport UserCard from \"./User/UserCard\";\r\nimport Paginator from \"./Paginator/Paginator\"\r\nimport {\r\n    changeCurrentPage,\r\n    follow,\r\n    followFetchingToggle,\r\n    requestUsers,\r\n    unFollow,\r\n} from \"../../redux/actions/UsersActionCreators\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport UsersSearchForm from \"./UsersSearchForm/UsersSearchForm\";\r\nimport {FilterType} from \"../../redux/reducers/UsersReducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype MapDispatchPropsTypes = {\r\n    changeCurrentPage: (id: number) => void\r\n    followFetchingToggle: () => void\r\n}\r\n\r\ntype PropsTypes = MapDispatchPropsTypes\r\n\r\nconst Users: React.FC<PropsTypes> = (props) => {\r\n    const totalUsersCount = useSelector((state: AppStateType) => state.usersPage.totalUsersCount)\r\n    const currentPage = useSelector((state: AppStateType) => state.usersPage.currentPage)\r\n    const pageSize = useSelector((state: AppStateType) => state.usersPage.pageSize)\r\n    const filter = useSelector((state: AppStateType) => state.usersPage.filter)\r\n    const followFetchingId = useSelector((state: AppStateType) => state.usersPage.followFetchingId)\r\n    const isFetch = useSelector((state: AppStateType) => state.usersPage.isFetch)\r\n    const users = useSelector((state: AppStateType) => state.usersPage.users)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1))\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(()=> {\r\n        const query: any = {}\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null ) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage, history])\r\n\r\n    const onChangePage = (e: { target: HTMLInputElement }): void => {\r\n        dispatch(requestUsers(+e.target.id, pageSize, filter))\r\n    }\r\n\r\n    const onFilterChange = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const unFollowHandler = (userId: number) => {\r\n        dispatch(unFollow(userId))\r\n    }\r\n    const followHandler = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n    let pages = []\r\n    for (let i=1; i<=pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Users}>\r\n            <h1>users</h1>\r\n\r\n            <UsersSearchForm onFilterChanged={onFilterChange}/>\r\n\r\n            <Paginator\r\n                pages={pages}\r\n                changePage={onChangePage}\r\n                currentPage={currentPage}\r\n            />\r\n\r\n            <div className={classes.Users__container}>\r\n                {\r\n                    isFetch ? <Loader /> : null\r\n                }\r\n                {\r\n                    isFetch\r\n                        ? null\r\n                        : users.map( (u: any,i: number)=>{\r\n                            return (<UserCard\r\n                                key={i}\r\n                                id={u.id}\r\n                                name={u.name}\r\n                                status={u.status}\r\n                                isFollow={u.followed}\r\n                                imgUrl={u.photos.small}\r\n                                btnDisabledIdArray={followFetchingId}\r\n                                follow={followHandler}\r\n                                unFollow={unFollowHandler}\r\n                            />)\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null,\r\n    {\r\n        changeCurrentPage,\r\n        followFetchingToggle,\r\n    }\r\n)(withAuthRedirect(Users))\r\n\r\n\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../components/FormControls/FormControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validate/validate\";\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    handleSubmit: () => void\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> = ({error, handleSubmit }) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field component={Input} validate={[maxLength, requiredField]} name={'email'} placeholder='login'/>\r\n            <Field component={Input} validate={[maxLength, requiredField]} name={'password'} placeholder='password'/>\r\n            <div>\r\n                <Field component={'input'} name={'rememberMe'} type=\"checkbox\"/>\r\n                <span>remember me</span>\r\n            </div>\r\n            <button>login</button>\r\n            {\r\n                error\r\n                    ?   <div style={{color: 'red', marginTop: '20px', fontSize: '24px'}}>\r\n                            {error}\r\n                        </div>\r\n                    : null\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType>({form: 'login'})(LoginForm)\r\n","import {instance, ResponseType} from \"./api\";\r\n\r\ntype GetAuthResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authApi = {\r\n    getAuth: ()=> {\r\n        return instance.get<ResponseType<GetAuthResponseDataType>>('auth/me')\r\n            .then(res => res.data)\r\n    },\r\n    login: (email: string, password: string, rememberMe: boolean = false) => {\r\n        return instance.post<ResponseType<LoginResponseDataType>>(`auth/login`, {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n    logout: () => {\r\n        return instance.delete(`auth/login`)\r\n    },\r\n};","import  {SET_USER_DATA} from \"./ActionTypes\";\r\nimport {ResultCodeEnum} from \"../../api/api\";\r\nimport {authApi} from \"../../api/authApi\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type AuthActionsTypes = SetAuthUserDataActionType\r\n\r\ntype SetAuthUserDataActionDataType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    data: SetAuthUserDataActionDataType\r\n}\r\n\r\nexport const setAuthUserData = (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n): SetAuthUserDataActionType => {\r\n    return {\r\n        type: SET_USER_DATA, data: {userId, email, login, isAuth}\r\n    }\r\n}\r\n\r\n// THUNK CREATORS\r\nexport const authMe = () => async (dispatch: Dispatch<AuthActionsTypes>) => {\r\n    let res = await authApi.getAuth()\r\n\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        let {id, login, email} = res.data\r\n        dispatch(setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const LoginUser = (\r\n    email: string,\r\n    login: string,\r\n    rememberMe: boolean\r\n) => async (dispatch: any) => {\r\n    let res = await authApi.login(email, login, rememberMe)\r\n    if (res.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(authMe())\r\n    } else {\r\n        const msg = res.messages.length > 0 ? res.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: msg}))\r\n    }\r\n}\r\n\r\nexport const logoutUser = () => async (dispatch: Dispatch<AuthActionsTypes>) => {\r\n    const res = await authApi.logout()\r\n\r\n    if (res.data.resultCode === ResultCodeEnum.SUCCESS) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n","import React, {FC} from 'react'\r\nimport {LoginReduxForm} from \"./LoginReduxForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from './Login.module.css'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {LoginUser} from \"../../redux/actions/AuthActionCreators\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    userId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    LoginUser: (email: string, login: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & MapStatePropsType\r\n\r\nconst Login: FC<PropsType> = ({LoginUser, isAuth, userId}) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        LoginUser(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={`/profile/${userId}`} />\r\n\r\n    return (\r\n        <div className={classes.Login}>\r\n            <div className={classes.Login__content}>\r\n                <h1>Login Page</h1>\r\n\r\n                <LoginReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType): MapStatePropsType {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        userId: state.auth.userId,\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    LoginUser,\r\n})(Login)\r\n","import React from \"react\"\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Header} from \"antd/es/layout/layout\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {logoutUser} from \"../../redux/actions/AuthActionCreators\";\r\n\r\n\r\nexport const AppHeader: React.FC = () => {\r\n    const isAuth = useSelector( (state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(logoutUser())\r\n    }\r\n\r\n    return (\r\n        <Header className=\"site-layout-background\" style={{ padding: 0, backgroundColor: '#001529' }}>\r\n            <Row>\r\n                <Col span={22}>\r\n                    <span className={classes.Header__logo}>bitaev.SN</span>\r\n                </Col>\r\n\r\n                <Col span={2}>\r\n                    {\r\n                        isAuth\r\n                            ? <Button type=\"primary\" onClick={onClickHandler}>{'logout'}</Button>\r\n                            : <div>\r\n                                <NavLink className={classes.Header__login} to={'/login'}>login</NavLink>\r\n                            </div>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n    )\r\n}\r\n\r\n","import './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Profile from \"./Pages/Profile/Profile\";\r\nimport Dialogs from \"./Pages/Dialogs/Dialogs\";\r\nimport {Route, Switch, withRouter} from \"react-router-dom\";\r\n// import {Redirect} from \"react-router-dom\"\r\nimport News from \"./Pages/News/News\";\r\nimport Music from \"./Pages/Music/Music\";\r\nimport Settings from \"./Pages/Settings/Settings\";\r\nimport Users from \"./Pages/Users/Users\";\r\nimport Login from \"./Pages/Login/Login\";\r\nimport React, {Component, ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/actions/AppActionCreator\";\r\nimport Loader from \"./components/Loader/Loader\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport 'antd/dist/antd.css'\r\nimport {Layout} from 'antd';\r\nimport {AppHeader} from \"./components/Header/Header\";\r\nimport {Footer} from \"antd/es/layout/layout\";\r\n\r\nconst {Content, Sider } = Layout;\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype PropsTypes = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nclass App extends Component<PropsTypes> {\r\n    state = {\r\n        collapsed: false,\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    onCollapse = (collapsed: any) => {\r\n        console.log(collapsed);\r\n        this.setState({collapsed});\r\n    }\r\n\r\n    render() {\r\n        const { collapsed } = this.state;\r\n        if (!this.props.initialized) {\r\n            return <Loader/>\r\n        }\r\n        return (\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <AppHeader />\r\n                <Layout className=\"site-layout\">\r\n                    <Sider theme=\"light\" collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n                        <Navbar userId={null}/>\r\n                    </Sider>\r\n                    <Content style={{ margin: '0 16px' }} >\r\n                        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                             <Switch>\r\n                                 <Route path={'/profile/:id?'} exact={true} render={() => <Profile/>}/>\r\n                                 <Route path={'/dialogs'} render={() => <Dialogs/>}/>\r\n                                 <Route path={'/users'} render={() => <Users/>}/>\r\n                                 <Route path={'/news'} component={News}/>\r\n                                 <Route path={'/music'} component={Music}/>\r\n                                 <Route path={'/settings'} component={Settings}/>\r\n                                 <Route path={'/login'} component={Login}/>\r\n                                 <Route path={'/'} render={() => <div> Home Page :3</div>}/>\r\n                                 {/*Редирект на профиль.*/}\r\n                                 {/*<Route path={'/'} render={ ()=> <Redirect to={'/profile'} /> }/>*/}\r\n                                 <Route path={'*'} exact render={() => <div>404 not found</div>}/>\r\n                             </Switch>\r\n                        </div>\r\n                        <Footer style={{ textAlign: 'center' }}>Social Network ©2020 Created by Bitaev Denis</Footer>\r\n                    </Content>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}),\r\n)(App);\r\n","import {INITIALIZED_SUCCESS} from \"./ActionTypes\";\r\nimport {authMe} from \"./AuthActionCreators\";\r\n\r\nexport type AppActionsTypes = initializedSuccessActionType\r\n\r\ntype initializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): initializedSuccessActionType => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS,\r\n    }\r\n}\r\n\r\n// THUNK\r\nexport const initializeApp = () => async (dispatch: any) => {\r\n    let promise = dispatch(authMe())\r\n\r\n    Promise.all([promise]).then( ()=> {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {ADD_POST, SAVE_PHOTO_SUCCESS, SET_PROFILE_INFO, SET_PROFILE_STATUS} from \"../actions/ActionTypes\";\r\nimport {ProfileActionsTypes} from \"../actions/ProfileActionCreators\";\r\n\r\ntype InitialStatePostType = {\r\n    id: number\r\n    text: string\r\n}\r\ntype InitialStateType = {\r\n    posts: Array<InitialStatePostType>\r\n    profileInfo: {\r\n        contacts: {}\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n    status: string,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    posts: [{id: 1, text: 'id1 text'},{id: 2, text: 'id2 text'}],\r\n    profileInfo: {\r\n        contacts: {},\r\n    },\r\n    photos: {\r\n        large: '',\r\n        small: '',\r\n    },\r\n    status: '',\r\n}\r\n\r\nconst ProfileReducer = (state = initialState, action: ProfileActionsTypes) => {\r\n    switch (action.type) {\r\n        case SET_PROFILE_STATUS:\r\n            return {\r\n                ...state, status: action.status,\r\n            }\r\n        case ADD_POST:\r\n            const arr = [...state.posts]\r\n            arr.push({id: state.posts.length, text: action.text})\r\n            return {\r\n                ...state, posts: arr,\r\n            }\r\n        case SET_PROFILE_INFO:\r\n            return {\r\n                ...state, profileInfo: {...action.data}, photos: {...action.data.photos}\r\n            }\r\n        case SAVE_PHOTO_SUCCESS:\r\n            return {\r\n                ...state, photos: {small: action.photo.small, large: action.photo.large}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ProfileReducer\r\n\r\n","import {ADD_MESSAGE} from \"../actions/ActionTypes\";\r\nimport {MessagesActionsTypes} from \"../actions/MessagesActionCreators\";\r\n\r\ntype InitialStateDialogsType = {\r\n    name: string\r\n    id: number\r\n}\r\ntype InitialStateMessagesType = {\r\n    name: string\r\n    text: string\r\n}\r\ntype InitialStateType = {\r\n    dialogs: Array<InitialStateDialogsType>\r\n    messages: Array<InitialStateMessagesType>\r\n    newMessageText: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    dialogs: [{name: 'Dima', id: 1}, {name: 'Lena', id: 2}, {name: 'Dimasol', id: 3}],\r\n    messages: [\r\n        {name: 'Dima', text: 'test steasd asd;ask asdkjl Asdj '},\r\n        {name: 'Dima', text: 'test steasd asd;ask asdkjl Asdj '},\r\n    ],\r\n    newMessageText: '',\r\n}\r\n\r\n\r\nconst MessagesReducer = (state = initialState, action: MessagesActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const msg = {\r\n                name: 'Dima',\r\n                text: action.message\r\n            }\r\n            const msgs = [...state.messages]\r\n            msgs.push(msg)\r\n            return {\r\n                ...state, messages: msgs , newMessageText: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default MessagesReducer\r\n","import {\r\n    CHANGE_CURRENT_PAGE, FOLLOW_FETCHING_TOGGLE,\r\n    FOLLOW_TOGGLE,\r\n    IS_FETCH_TOGGLE, SET_FILTERS,\r\n    SET_USERS,\r\n    SET_USERS_TOTAL_COUNT\r\n} from \"../actions/ActionTypes\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {UsersActionTypes} from \"../actions/UsersActionCreators\";\r\n\r\ntype InitialStateType = {\r\n    users: Array<UserType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetch: boolean,\r\n    followFetchingId: Array<number>,\r\n    filter: {\r\n        term: string,\r\n        friend: null | boolean\r\n    }\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    users: [],\r\n    pageSize: 100,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetch: false,\r\n    followFetchingId: [],\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst UsersReducer = (state = initialState, action: UsersActionTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW_TOGGLE:\r\n            return {\r\n                ...state, users: state.users.map( (item: any) => {\r\n                    if (+item.id === +action.id) {\r\n                        return {...item, followed: !item.followed}\r\n                    }\r\n                    return item\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case CHANGE_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.id,\r\n            }\r\n        case SET_USERS_TOTAL_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count,\r\n            }\r\n        case IS_FETCH_TOGGLE:\r\n            return {\r\n                ...state, isFetch: action.bool,\r\n            }\r\n        case FOLLOW_FETCHING_TOGGLE:\r\n            const prevArray = state.followFetchingId\r\n            let res\r\n            if (prevArray.indexOf( action.id ) === -1) {\r\n                res = [...state.followFetchingId, action.id]\r\n            } else {\r\n                res = [...state.followFetchingId.filter( i => i !== action.id)]\r\n            }\r\n            return {\r\n                ...state, followFetchingId: res,\r\n            }\r\n        case SET_FILTERS:\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    term: action.filter.term,\r\n                    friend: action.filter.friend\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// export type initialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\nexport default UsersReducer\r\n\r\n\r\n","import {SET_USER_DATA} from \"../actions/ActionTypes\";\r\nimport {AuthActionsTypes} from \"../actions/AuthActionCreators\";\r\n\r\nexport type initialStateType = {\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isFetching: boolean,\r\n    isAuth: boolean,\r\n}\r\n\r\nconst initialState: initialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: false,\r\n    isAuth: false,\r\n}\r\n\r\nconst AuthReducer = (state = initialState, action: AuthActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state, ...action.data, isAuth: action.data.isAuth,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default AuthReducer\r\n\r\n","import {INITIALIZED_SUCCESS} from \"../actions/ActionTypes\";\r\nimport {AppActionsTypes} from \"../actions/AppActionCreator\";\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\nconst AppReducer = (state = initialState, action: AppActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state, initialized: true,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default AppReducer\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport ProfileReducer from \"./reducers/ProfileReducer\";\r\nimport MessagesReducer from \"./reducers/MessagesReducer\";\r\nimport UsersReducer from \"./reducers/UsersReducer\";\r\nimport AuthReducer from \"./reducers/AuthReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport AppReducer from \"./reducers/AppReducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: ProfileReducer,\r\n    messagesPage: MessagesReducer,\r\n    usersPage: UsersReducer,\r\n    auth: AuthReducer,\r\n    app: AppReducer,\r\n    form: formReducer,\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n                <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__26A8w\",\"Navbar__link\":\"Navbar_Navbar__link__1Ohz8\",\"Navbar__linkActive\":\"Navbar_Navbar__linkActive__314D7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2zKDI\",\"formControl__input\":\"FormControls_formControl__input__31SRj\",\"errorMessage\":\"FormControls_errorMessage___S2dl\",\"formControl__textArea\":\"FormControls_formControl__textArea__1kHsS\",\"error\":\"FormControls_error__157_r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileData\":\"ProfileData_ProfileData__3vep5\",\"ProfileData__inputInfo\":\"ProfileData_ProfileData__inputInfo__2bkKu\",\"ProfileData__info\":\"ProfileData_ProfileData__info__jAWTQ\",\"ProfileData__contacts\":\"ProfileData_ProfileData__contacts__1OOof\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialogs_Dialogs__3M5bg\",\"Dialogs__container\":\"Dialogs_Dialogs__container__1cRGC\",\"Dialogs__lists\":\"Dialogs_Dialogs__lists__14f8Z\",\"Dialogs__textarea\":\"Dialogs_Dialogs__textarea__3Qod-\",\"Dialogs__messages\":\"Dialogs_Dialogs__messages__IzA8t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserCard\":\"UserCard_UserCard__3y7kK\",\"UserCard__button\":\"UserCard_UserCard__button__2kDBd\",\"UserCard__avatar\":\"UserCard_UserCard__avatar__3zR3R\",\"UserCard__left\":\"UserCard_UserCard__left__34gdq\",\"UserCard__right\":\"UserCard_UserCard__right__3DtvN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Post_Container__3IdZg\",\"Post\":\"Post_Post__w9yQf\",\"Post__img\":\"Post_Post__img__1Mytx\",\"Post__text\":\"Post_Post__text__1rB-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__I8Gce\",\"Message__text\":\"Message_Message__text__30QFn\",\"Message__info\":\"Message_Message__info__2_6Zb\",\"Message__img\":\"Message_Message__img__1Fdac\"};"],"sourceRoot":""}